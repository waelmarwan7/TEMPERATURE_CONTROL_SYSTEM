
MASTER_MCU_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000224  00800060  00002e34  00002ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800284  00800284  000030ec  2**0
                  ALLOC
  3 .stab         000021d8  00000000  00000000  000030ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e1d  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000060e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006281  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006473  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000887e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000addc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000af9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b292  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 38 11 	call	0x2270	; 0x2270 <main>
      8a:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 58       	subi	r30, 0x8C	; 140
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <SPI_VoidInit>:
#include "avr/io.h"



void SPI_VoidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	    //SS : Pullup internally
		DIO_SetPinDirection(DIO_PORTB,DIO_PIN4,DIO_OUTPUT);
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	64 e0       	ldi	r22, 0x04	; 4
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
		//MOSI
		DIO_SetPinDirection(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	65 e0       	ldi	r22, 0x05	; 5
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>

		//MISO
		DIO_SetPinDirection(DIO_PORTB,DIO_PIN6,DIO_INPUT);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	66 e0       	ldi	r22, 0x06	; 6
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>

		//SCK
		DIO_SetPinDirection(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	67 e0       	ldi	r22, 0x07	; 7
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>

	/*Data Order*/
	#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
		SET_BIT(SPCR , SPCR_DORD) ;
	#elif SPI_DATA_ORDER == SPI_DATA_MSP_FIRST
		CLR_BIT(SPCR , SPCR_DORD) ;
     e5e:	ad e2       	ldi	r26, 0x2D	; 45
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ed e2       	ldi	r30, 0x2D	; 45
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7d       	andi	r24, 0xDF	; 223
     e6a:	8c 93       	st	X, r24
		#error "wrong SPI_DATA_ORDER config"
	#endif

	/*Master/Slave Select*/
	#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
		SET_BIT(SPCR , SPCR_MSTR) ;
     e6c:	ad e2       	ldi	r26, 0x2D	; 45
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ed e2       	ldi	r30, 0x2D	; 45
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 61       	ori	r24, 0x10	; 16
     e78:	8c 93       	st	X, r24
		#error "wrong SPI_MASTER_SLAVE_SELECT config"
	#endif

	/*Clock Polarity*/
	#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
		CLR_BIT(SPCR , SPCR_CPOL) ;
     e7a:	ad e2       	ldi	r26, 0x2D	; 45
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ed e2       	ldi	r30, 0x2D	; 45
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	87 7f       	andi	r24, 0xF7	; 247
     e86:	8c 93       	st	X, r24
		#error "wrong SPI_CLOCK_POLARITY config"
	#endif

	/*Clock Phase*/
	#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
		CLR_BIT(SPCR , SPCR_CPHA) ;
     e88:	ad e2       	ldi	r26, 0x2D	; 45
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ed e2       	ldi	r30, 0x2D	; 45
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8b 7f       	andi	r24, 0xFB	; 251
     e94:	8c 93       	st	X, r24
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
		SET_BIT(SPCR , SPCR_SPR0) ;
		CLR_BIT(SPCR , SPCR_SPR1) ;
		SET_BIT(SPSR , SPSR_SPI2X) ;
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
		SET_BIT(SPCR , SPCR_SPR0) ;
     e96:	ad e2       	ldi	r26, 0x2D	; 45
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	ed e2       	ldi	r30, 0x2D	; 45
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	81 60       	ori	r24, 0x01	; 1
     ea2:	8c 93       	st	X, r24
		CLR_BIT(SPCR , SPCR_SPR1) ;
     ea4:	ad e2       	ldi	r26, 0x2D	; 45
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ed e2       	ldi	r30, 0x2D	; 45
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8d 7f       	andi	r24, 0xFD	; 253
     eb0:	8c 93       	st	X, r24
		CLR_BIT(SPSR , SPSR_SPI2X) ;
     eb2:	ae e2       	ldi	r26, 0x2E	; 46
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ee e2       	ldi	r30, 0x2E	; 46
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8e 7f       	andi	r24, 0xFE	; 254
     ebe:	8c 93       	st	X, r24
		#error "wrong SPI_CLOCK_RATE config"
	#endif

	/*SPI Interrupt Enable*/
	#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
		CLR_BIT(SPCR , SPCR_SPIE) ;
     ec0:	ad e2       	ldi	r26, 0x2D	; 45
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ed e2       	ldi	r30, 0x2D	; 45
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8f 77       	andi	r24, 0x7F	; 127
     ecc:	8c 93       	st	X, r24

	/*SPI Enable*/
	#if SPI_ENABLE_MODE == SPI_DISABLE
		CLR_BIT(SPCR , SPCR_SPE) ;
	#elif SPI_ENABLE_MODE == SPI_ENABLE
		SET_BIT(SPCR , SPCR_SPE) ;
     ece:	ad e2       	ldi	r26, 0x2D	; 45
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ed e2       	ldi	r30, 0x2D	; 45
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 64       	ori	r24, 0x40	; 64
     eda:	8c 93       	st	X, r24
	#else
		#error "wrong SPI_ENABLE_MODE config"
	#endif

}
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <SPI_transceive>:



u8   SPI_transceive(u8 u8Data_copy){
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	0f 92       	push	r0
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	89 83       	std	Y+1, r24	; 0x01

	/*  send the data  */
	SPDR = u8Data_copy;
     eee:	ef e2       	ldi	r30, 0x2F	; 47
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	80 83       	st	Z, r24

	/*  Wait (busy wait ) until transfer complete */
	while((GET_BIT(SPSR , SPIF)) == 0 );
     ef6:	ee e2       	ldi	r30, 0x2E	; 46
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 23       	and	r24, r24
     efe:	dc f7       	brge	.-10     	; 0xef6 <SPI_transceive+0x14>

	/*  Get  the exchange  data   */
	return SPDR;
     f00:	ef e2       	ldi	r30, 0x2F	; 47
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z


}
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <DIO_SetPinValue>:
#include  "util/delay.h"



void  DIO_SetPinValue (u8 U8PortIdcopy ,u8 U8PinIdCopy ,u8 U8PinValueCopy)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	27 97       	sbiw	r28, 0x07	; 7
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	6a 83       	std	Y+2, r22	; 0x02
     f26:	4b 83       	std	Y+3, r20	; 0x03
	if((U8PortIdcopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <DIO_SetPinValue+0x22>
     f2e:	fc c0       	rjmp	.+504    	; 0x1128 <DIO_SetPinValue+0x21a>
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	88 30       	cpi	r24, 0x08	; 8
     f34:	08 f0       	brcs	.+2      	; 0xf38 <DIO_SetPinValue+0x2a>
     f36:	f8 c0       	rjmp	.+496    	; 0x1128 <DIO_SetPinValue+0x21a>
	{
		if(U8PinValueCopy == DIO_HIGH)
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	09 f0       	breq	.+2      	; 0xf40 <DIO_SetPinValue+0x32>
     f3e:	6f c0       	rjmp	.+222    	; 0x101e <DIO_SetPinValue+0x110>
		{
			switch (U8PortIdcopy)
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3f 83       	std	Y+7, r19	; 0x07
     f48:	2e 83       	std	Y+6, r18	; 0x06
     f4a:	8e 81       	ldd	r24, Y+6	; 0x06
     f4c:	9f 81       	ldd	r25, Y+7	; 0x07
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	91 05       	cpc	r25, r1
     f52:	49 f1       	breq	.+82     	; 0xfa6 <DIO_SetPinValue+0x98>
     f54:	2e 81       	ldd	r18, Y+6	; 0x06
     f56:	3f 81       	ldd	r19, Y+7	; 0x07
     f58:	22 30       	cpi	r18, 0x02	; 2
     f5a:	31 05       	cpc	r19, r1
     f5c:	2c f4       	brge	.+10     	; 0xf68 <DIO_SetPinValue+0x5a>
     f5e:	8e 81       	ldd	r24, Y+6	; 0x06
     f60:	9f 81       	ldd	r25, Y+7	; 0x07
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	61 f0       	breq	.+24     	; 0xf7e <DIO_SetPinValue+0x70>
     f66:	ec c0       	rjmp	.+472    	; 0x1140 <DIO_SetPinValue+0x232>
     f68:	2e 81       	ldd	r18, Y+6	; 0x06
     f6a:	3f 81       	ldd	r19, Y+7	; 0x07
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	71 f1       	breq	.+92     	; 0xfce <DIO_SetPinValue+0xc0>
     f72:	8e 81       	ldd	r24, Y+6	; 0x06
     f74:	9f 81       	ldd	r25, Y+7	; 0x07
     f76:	83 30       	cpi	r24, 0x03	; 3
     f78:	91 05       	cpc	r25, r1
     f7a:	e9 f1       	breq	.+122    	; 0xff6 <DIO_SetPinValue+0xe8>
     f7c:	e1 c0       	rjmp	.+450    	; 0x1140 <DIO_SetPinValue+0x232>
			{
				case DIO_PORTA : SET_BIT(PORTA,U8PinIdCopy); break;
     f7e:	ab e3       	ldi	r26, 0x3B	; 59
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	eb e3       	ldi	r30, 0x3B	; 59
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_SetPinValue+0x8e>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_SetPinValue+0x8a>
     fa0:	84 2b       	or	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	cd c0       	rjmp	.+410    	; 0x1140 <DIO_SetPinValue+0x232>
				case DIO_PORTB : SET_BIT(PORTB,U8PinIdCopy); break;
     fa6:	a8 e3       	ldi	r26, 0x38	; 56
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e8 e3       	ldi	r30, 0x38	; 56
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_SetPinValue+0xb6>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_SetPinValue+0xb2>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	b9 c0       	rjmp	.+370    	; 0x1140 <DIO_SetPinValue+0x232>
				case DIO_PORTC : SET_BIT(PORTC,U8PinIdCopy); break;
     fce:	a5 e3       	ldi	r26, 0x35	; 53
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e5 e3       	ldi	r30, 0x35	; 53
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_SetPinValue+0xde>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_SetPinValue+0xda>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	a5 c0       	rjmp	.+330    	; 0x1140 <DIO_SetPinValue+0x232>
				case DIO_PORTD : SET_BIT(PORTD,U8PinIdCopy); break;
     ff6:	a2 e3       	ldi	r26, 0x32	; 50
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e2 e3       	ldi	r30, 0x32	; 50
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_SetPinValue+0x106>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_SetPinValue+0x102>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	91 c0       	rjmp	.+290    	; 0x1140 <DIO_SetPinValue+0x232>
			}
		}
		else if (U8PinValueCopy == DIO_LOW)
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 23       	and	r24, r24
    1022:	09 f0       	breq	.+2      	; 0x1026 <DIO_SetPinValue+0x118>
    1024:	74 c0       	rjmp	.+232    	; 0x110e <DIO_SetPinValue+0x200>
		{
			switch (U8PortIdcopy)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3d 83       	std	Y+5, r19	; 0x05
    102e:	2c 83       	std	Y+4, r18	; 0x04
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 05       	cpc	r25, r1
    1038:	59 f1       	breq	.+86     	; 0x1090 <DIO_SetPinValue+0x182>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	2c f4       	brge	.+10     	; 0x104e <DIO_SetPinValue+0x140>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	69 f0       	breq	.+26     	; 0x1066 <DIO_SetPinValue+0x158>
    104c:	79 c0       	rjmp	.+242    	; 0x1140 <DIO_SetPinValue+0x232>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	89 f1       	breq	.+98     	; 0x10ba <DIO_SetPinValue+0x1ac>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	91 05       	cpc	r25, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <DIO_SetPinValue+0x156>
    1062:	40 c0       	rjmp	.+128    	; 0x10e4 <DIO_SetPinValue+0x1d6>
    1064:	6d c0       	rjmp	.+218    	; 0x1140 <DIO_SetPinValue+0x232>
			{
				case DIO_PORTA : CLR_BIT(PORTA,U8PinIdCopy); break;
    1066:	ab e3       	ldi	r26, 0x3B	; 59
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	eb e3       	ldi	r30, 0x3B	; 59
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_SetPinValue+0x176>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_SetPinValue+0x172>
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	58 c0       	rjmp	.+176    	; 0x1140 <DIO_SetPinValue+0x232>
				case DIO_PORTB : CLR_BIT(PORTB,U8PinIdCopy); break;
    1090:	a8 e3       	ldi	r26, 0x38	; 56
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e8 e3       	ldi	r30, 0x38	; 56
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_SetPinValue+0x1a0>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_SetPinValue+0x19c>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	43 c0       	rjmp	.+134    	; 0x1140 <DIO_SetPinValue+0x232>
				case DIO_PORTC : CLR_BIT(PORTC,U8PinIdCopy); break;
    10ba:	a5 e3       	ldi	r26, 0x35	; 53
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e5 e3       	ldi	r30, 0x35	; 53
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_SetPinValue+0x1ca>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_SetPinValue+0x1c6>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	2e c0       	rjmp	.+92     	; 0x1140 <DIO_SetPinValue+0x232>
				case DIO_PORTD : CLR_BIT(PORTD,U8PinIdCopy); break;
    10e4:	a2 e3       	ldi	r26, 0x32	; 50
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e2 e3       	ldi	r30, 0x32	; 50
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_SetPinValue+0x1f4>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_SetPinValue+0x1f0>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	19 c0       	rjmp	.+50     	; 0x1140 <DIO_SetPinValue+0x232>
			}
		}
		else
			printf("ERROR SELECT HIGH OR LOW VALUE.. ");
    110e:	00 d0       	rcall	.+0      	; 0x1110 <DIO_SetPinValue+0x202>
    1110:	ed b7       	in	r30, 0x3d	; 61
    1112:	fe b7       	in	r31, 0x3e	; 62
    1114:	31 96       	adiw	r30, 0x01	; 1
    1116:	80 e6       	ldi	r24, 0x60	; 96
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	91 83       	std	Z+1, r25	; 0x01
    111c:	80 83       	st	Z, r24
    111e:	0e 94 86 14 	call	0x290c	; 0x290c <printf>
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0c c0       	rjmp	.+24     	; 0x1140 <DIO_SetPinValue+0x232>

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
    1128:	00 d0       	rcall	.+0      	; 0x112a <DIO_SetPinValue+0x21c>
    112a:	ed b7       	in	r30, 0x3d	; 61
    112c:	fe b7       	in	r31, 0x3e	; 62
    112e:	31 96       	adiw	r30, 0x01	; 1
    1130:	82 e8       	ldi	r24, 0x82	; 130
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	80 83       	st	Z, r24
    1138:	0e 94 86 14 	call	0x290c	; 0x290c <printf>
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0

}
    1140:	27 96       	adiw	r28, 0x07	; 7
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <DIO_SetPinDirection>:



void  DIO_SetPinDirection (u8 U8PortIdcopy ,u8 U8PinIdCopy ,u8 U8PinDirCopy)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	27 97       	sbiw	r28, 0x07	; 7
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	6a 83       	std	Y+2, r22	; 0x02
    116a:	4b 83       	std	Y+3, r20	; 0x03
	if((U8PortIdcopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	84 30       	cpi	r24, 0x04	; 4
    1170:	08 f0       	brcs	.+2      	; 0x1174 <DIO_SetPinDirection+0x22>
    1172:	fc c0       	rjmp	.+504    	; 0x136c <DIO_SetPinDirection+0x21a>
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	88 30       	cpi	r24, 0x08	; 8
    1178:	08 f0       	brcs	.+2      	; 0x117c <DIO_SetPinDirection+0x2a>
    117a:	f8 c0       	rjmp	.+496    	; 0x136c <DIO_SetPinDirection+0x21a>
	{
		if(U8PinDirCopy == DIO_OUTPUT)
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	09 f0       	breq	.+2      	; 0x1184 <DIO_SetPinDirection+0x32>
    1182:	6f c0       	rjmp	.+222    	; 0x1262 <DIO_SetPinDirection+0x110>
		{
			switch (U8PortIdcopy)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3f 83       	std	Y+7, r19	; 0x07
    118c:	2e 83       	std	Y+6, r18	; 0x06
    118e:	8e 81       	ldd	r24, Y+6	; 0x06
    1190:	9f 81       	ldd	r25, Y+7	; 0x07
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	91 05       	cpc	r25, r1
    1196:	49 f1       	breq	.+82     	; 0x11ea <DIO_SetPinDirection+0x98>
    1198:	2e 81       	ldd	r18, Y+6	; 0x06
    119a:	3f 81       	ldd	r19, Y+7	; 0x07
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	2c f4       	brge	.+10     	; 0x11ac <DIO_SetPinDirection+0x5a>
    11a2:	8e 81       	ldd	r24, Y+6	; 0x06
    11a4:	9f 81       	ldd	r25, Y+7	; 0x07
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <DIO_SetPinDirection+0x70>
    11aa:	ec c0       	rjmp	.+472    	; 0x1384 <DIO_SetPinDirection+0x232>
    11ac:	2e 81       	ldd	r18, Y+6	; 0x06
    11ae:	3f 81       	ldd	r19, Y+7	; 0x07
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	71 f1       	breq	.+92     	; 0x1212 <DIO_SetPinDirection+0xc0>
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	e9 f1       	breq	.+122    	; 0x123a <DIO_SetPinDirection+0xe8>
    11c0:	e1 c0       	rjmp	.+450    	; 0x1384 <DIO_SetPinDirection+0x232>
			{
			case DIO_PORTA : SET_BIT(DDRA,U8PinIdCopy); break;
    11c2:	aa e3       	ldi	r26, 0x3A	; 58
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	ea e3       	ldi	r30, 0x3A	; 58
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_SetPinDirection+0x8e>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_SetPinDirection+0x8a>
    11e4:	84 2b       	or	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	cd c0       	rjmp	.+410    	; 0x1384 <DIO_SetPinDirection+0x232>
			case DIO_PORTB : SET_BIT(DDRB,U8PinIdCopy); break;
    11ea:	a7 e3       	ldi	r26, 0x37	; 55
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e7 e3       	ldi	r30, 0x37	; 55
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_SetPinDirection+0xb6>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_SetPinDirection+0xb2>
    120c:	84 2b       	or	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	b9 c0       	rjmp	.+370    	; 0x1384 <DIO_SetPinDirection+0x232>
			case DIO_PORTC : SET_BIT(DDRC,U8PinIdCopy); break;
    1212:	a4 e3       	ldi	r26, 0x34	; 52
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e4 e3       	ldi	r30, 0x34	; 52
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_SetPinDirection+0xde>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_SetPinDirection+0xda>
    1234:	84 2b       	or	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	a5 c0       	rjmp	.+330    	; 0x1384 <DIO_SetPinDirection+0x232>
			case DIO_PORTD : SET_BIT(DDRD,U8PinIdCopy); break;
    123a:	a1 e3       	ldi	r26, 0x31	; 49
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e1 e3       	ldi	r30, 0x31	; 49
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_SetPinDirection+0x106>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_SetPinDirection+0x102>
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	91 c0       	rjmp	.+290    	; 0x1384 <DIO_SetPinDirection+0x232>
			}
		}
		else if (U8PinDirCopy == DIO_INPUT)
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	88 23       	and	r24, r24
    1266:	09 f0       	breq	.+2      	; 0x126a <DIO_SetPinDirection+0x118>
    1268:	74 c0       	rjmp	.+232    	; 0x1352 <DIO_SetPinDirection+0x200>
		{
			switch (U8PortIdcopy)
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3d 83       	std	Y+5, r19	; 0x05
    1272:	2c 83       	std	Y+4, r18	; 0x04
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	59 f1       	breq	.+86     	; 0x12d4 <DIO_SetPinDirection+0x182>
    127e:	2c 81       	ldd	r18, Y+4	; 0x04
    1280:	3d 81       	ldd	r19, Y+5	; 0x05
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	2c f4       	brge	.+10     	; 0x1292 <DIO_SetPinDirection+0x140>
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	69 f0       	breq	.+26     	; 0x12aa <DIO_SetPinDirection+0x158>
    1290:	79 c0       	rjmp	.+242    	; 0x1384 <DIO_SetPinDirection+0x232>
    1292:	2c 81       	ldd	r18, Y+4	; 0x04
    1294:	3d 81       	ldd	r19, Y+5	; 0x05
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	89 f1       	breq	.+98     	; 0x12fe <DIO_SetPinDirection+0x1ac>
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <DIO_SetPinDirection+0x156>
    12a6:	40 c0       	rjmp	.+128    	; 0x1328 <DIO_SetPinDirection+0x1d6>
    12a8:	6d c0       	rjmp	.+218    	; 0x1384 <DIO_SetPinDirection+0x232>
			{
			case DIO_PORTA : CLR_BIT(DDRA,U8PinIdCopy); break;
    12aa:	aa e3       	ldi	r26, 0x3A	; 58
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	ea e3       	ldi	r30, 0x3A	; 58
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_SetPinDirection+0x176>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_SetPinDirection+0x172>
    12cc:	80 95       	com	r24
    12ce:	84 23       	and	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	58 c0       	rjmp	.+176    	; 0x1384 <DIO_SetPinDirection+0x232>
			case DIO_PORTB : CLR_BIT(DDRB,U8PinIdCopy); break;
    12d4:	a7 e3       	ldi	r26, 0x37	; 55
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e7 e3       	ldi	r30, 0x37	; 55
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_SetPinDirection+0x1a0>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_SetPinDirection+0x19c>
    12f6:	80 95       	com	r24
    12f8:	84 23       	and	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	43 c0       	rjmp	.+134    	; 0x1384 <DIO_SetPinDirection+0x232>
			case DIO_PORTC : CLR_BIT(DDRC,U8PinIdCopy); break;
    12fe:	a4 e3       	ldi	r26, 0x34	; 52
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e4 e3       	ldi	r30, 0x34	; 52
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_SetPinDirection+0x1ca>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_SetPinDirection+0x1c6>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	2e c0       	rjmp	.+92     	; 0x1384 <DIO_SetPinDirection+0x232>
			case DIO_PORTD : CLR_BIT(DDRD,U8PinIdCopy); break;
    1328:	a1 e3       	ldi	r26, 0x31	; 49
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e1 e3       	ldi	r30, 0x31	; 49
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_SetPinDirection+0x1f4>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_SetPinDirection+0x1f0>
    134a:	80 95       	com	r24
    134c:	84 23       	and	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	19 c0       	rjmp	.+50     	; 0x1384 <DIO_SetPinDirection+0x232>
			}
		}else
			printf("ERROR SELECT OUTPUT OR INPUT VALUE.. ");
    1352:	00 d0       	rcall	.+0      	; 0x1354 <DIO_SetPinDirection+0x202>
    1354:	ed b7       	in	r30, 0x3d	; 61
    1356:	fe b7       	in	r31, 0x3e	; 62
    1358:	31 96       	adiw	r30, 0x01	; 1
    135a:	86 eb       	ldi	r24, 0xB6	; 182
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
    1362:	0e 94 86 14 	call	0x290c	; 0x290c <printf>
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0c c0       	rjmp	.+24     	; 0x1384 <DIO_SetPinDirection+0x232>

	}else
		printf("ERROR SELECTION PORTS FROM 0--3 AND PIN FROM 0--7..");
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_SetPinDirection+0x21c>
    136e:	ed b7       	in	r30, 0x3d	; 61
    1370:	fe b7       	in	r31, 0x3e	; 62
    1372:	31 96       	adiw	r30, 0x01	; 1
    1374:	82 e8       	ldi	r24, 0x82	; 130
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
    137c:	0e 94 86 14 	call	0x290c	; 0x290c <printf>
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
}
    1384:	27 96       	adiw	r28, 0x07	; 7
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <DIO_GetPinValue>:


u8    DIO_GetPinValue  (u8 U8PortIdCopy , u8 U8PinIdCopy)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <DIO_GetPinValue+0x6>
    139c:	00 d0       	rcall	.+0      	; 0x139e <DIO_GetPinValue+0x8>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <DIO_GetPinValue+0xa>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	8a 83       	std	Y+2, r24	; 0x02
    13a6:	6b 83       	std	Y+3, r22	; 0x03
	if((U8PortIdCopy<=DIO_PORTD) && (U8PinIdCopy<=DIO_PIN7))
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	84 30       	cpi	r24, 0x04	; 4
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <DIO_GetPinValue+0x1a>
    13ae:	6f c0       	rjmp	.+222    	; 0x148e <DIO_GetPinValue+0xf8>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 30       	cpi	r24, 0x08	; 8
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <DIO_GetPinValue+0x22>
    13b6:	6b c0       	rjmp	.+214    	; 0x148e <DIO_GetPinValue+0xf8>
	{
		u8 PinValue=0;
    13b8:	19 82       	std	Y+1, r1	; 0x01

			switch (U8PortIdCopy)
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3e 83       	std	Y+6, r19	; 0x06
    13c2:	2d 83       	std	Y+5, r18	; 0x05
    13c4:	4d 81       	ldd	r20, Y+5	; 0x05
    13c6:	5e 81       	ldd	r21, Y+6	; 0x06
    13c8:	41 30       	cpi	r20, 0x01	; 1
    13ca:	51 05       	cpc	r21, r1
    13cc:	41 f1       	breq	.+80     	; 0x141e <DIO_GetPinValue+0x88>
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	91 05       	cpc	r25, r1
    13d6:	34 f4       	brge	.+12     	; 0x13e4 <DIO_GetPinValue+0x4e>
    13d8:	2d 81       	ldd	r18, Y+5	; 0x05
    13da:	3e 81       	ldd	r19, Y+6	; 0x06
    13dc:	21 15       	cp	r18, r1
    13de:	31 05       	cpc	r19, r1
    13e0:	61 f0       	breq	.+24     	; 0x13fa <DIO_GetPinValue+0x64>
    13e2:	52 c0       	rjmp	.+164    	; 0x1488 <DIO_GetPinValue+0xf2>
    13e4:	4d 81       	ldd	r20, Y+5	; 0x05
    13e6:	5e 81       	ldd	r21, Y+6	; 0x06
    13e8:	42 30       	cpi	r20, 0x02	; 2
    13ea:	51 05       	cpc	r21, r1
    13ec:	51 f1       	breq	.+84     	; 0x1442 <DIO_GetPinValue+0xac>
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	83 30       	cpi	r24, 0x03	; 3
    13f4:	91 05       	cpc	r25, r1
    13f6:	b9 f1       	breq	.+110    	; 0x1466 <DIO_GetPinValue+0xd0>
    13f8:	47 c0       	rjmp	.+142    	; 0x1488 <DIO_GetPinValue+0xf2>
			{
				case DIO_PORTA : PinValue= GET_BIT(PINA,U8PinIdCopy); break;
    13fa:	e9 e3       	ldi	r30, 0x39	; 57
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_GetPinValue+0x7c>
    140e:	55 95       	asr	r21
    1410:	47 95       	ror	r20
    1412:	8a 95       	dec	r24
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_GetPinValue+0x78>
    1416:	ca 01       	movw	r24, r20
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	35 c0       	rjmp	.+106    	; 0x1488 <DIO_GetPinValue+0xf2>
				case DIO_PORTB : PinValue= GET_BIT(PINB,U8PinIdCopy); break;
    141e:	e6 e3       	ldi	r30, 0x36	; 54
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a9 01       	movw	r20, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_GetPinValue+0xa0>
    1432:	55 95       	asr	r21
    1434:	47 95       	ror	r20
    1436:	8a 95       	dec	r24
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_GetPinValue+0x9c>
    143a:	ca 01       	movw	r24, r20
    143c:	81 70       	andi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	23 c0       	rjmp	.+70     	; 0x1488 <DIO_GetPinValue+0xf2>
				case DIO_PORTC : PinValue= GET_BIT(PINC,U8PinIdCopy); break;
    1442:	e3 e3       	ldi	r30, 0x33	; 51
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a9 01       	movw	r20, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_GetPinValue+0xc4>
    1456:	55 95       	asr	r21
    1458:	47 95       	ror	r20
    145a:	8a 95       	dec	r24
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_GetPinValue+0xc0>
    145e:	ca 01       	movw	r24, r20
    1460:	81 70       	andi	r24, 0x01	; 1
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	11 c0       	rjmp	.+34     	; 0x1488 <DIO_GetPinValue+0xf2>
				case DIO_PORTD : PinValue= GET_BIT(PIND,U8PinIdCopy); break;
    1466:	e0 e3       	ldi	r30, 0x30	; 48
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_GetPinValue+0xe8>
    147a:	55 95       	asr	r21
    147c:	47 95       	ror	r20
    147e:	8a 95       	dec	r24
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_GetPinValue+0xe4>
    1482:	ca 01       	movw	r24, r20
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	89 83       	std	Y+1, r24	; 0x01
			}
		return PinValue;
    1488:	59 81       	ldd	r21, Y+1	; 0x01
    148a:	5c 83       	std	Y+4, r21	; 0x04
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <DIO_GetPinValue+0xfa>

	}else
	{
	}
	return 0;
    148e:	1c 82       	std	Y+4, r1	; 0x04
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1492:	26 96       	adiw	r28, 0x06	; 6
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <DIO_SetPortValue>:


void  DIO_SetPortValue (u8 U8PortIdcopy ,u8 U8PinValueCopy)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <DIO_SetPortValue+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <DIO_SetPortValue+0x8>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	6a 83       	std	Y+2, r22	; 0x02
	if(U8PortIdcopy<=DIO_PORTD)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	84 30       	cpi	r24, 0x04	; 4
    14b8:	98 f5       	brcc	.+102    	; 0x1520 <DIO_SetPortValue+0x7c>
	{

			switch (U8PortIdcopy)
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3c 83       	std	Y+4, r19	; 0x04
    14c2:	2b 83       	std	Y+3, r18	; 0x03
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	d1 f0       	breq	.+52     	; 0x1502 <DIO_SetPortValue+0x5e>
    14ce:	2b 81       	ldd	r18, Y+3	; 0x03
    14d0:	3c 81       	ldd	r19, Y+4	; 0x04
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <DIO_SetPortValue+0x3e>
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	61 f0       	breq	.+24     	; 0x14f8 <DIO_SetPortValue+0x54>
    14e0:	2b c0       	rjmp	.+86     	; 0x1538 <DIO_SetPortValue+0x94>
    14e2:	2b 81       	ldd	r18, Y+3	; 0x03
    14e4:	3c 81       	ldd	r19, Y+4	; 0x04
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	81 f0       	breq	.+32     	; 0x150c <DIO_SetPortValue+0x68>
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	91 05       	cpc	r25, r1
    14f4:	81 f0       	breq	.+32     	; 0x1516 <DIO_SetPortValue+0x72>
    14f6:	20 c0       	rjmp	.+64     	; 0x1538 <DIO_SetPortValue+0x94>
			{
				case DIO_PORTA : SET_PORT(PORTA,U8PinValueCopy); break;
    14f8:	eb e3       	ldi	r30, 0x3B	; 59
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	80 83       	st	Z, r24
    1500:	1b c0       	rjmp	.+54     	; 0x1538 <DIO_SetPortValue+0x94>
				case DIO_PORTB : SET_PORT(PORTB,U8PinValueCopy); break;
    1502:	e8 e3       	ldi	r30, 0x38	; 56
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <DIO_SetPortValue+0x94>
				case DIO_PORTC : SET_PORT(PORTC,U8PinValueCopy); break;
    150c:	e5 e3       	ldi	r30, 0x35	; 53
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
    1514:	11 c0       	rjmp	.+34     	; 0x1538 <DIO_SetPortValue+0x94>
				case DIO_PORTD : SET_PORT(PORTD,U8PinValueCopy); break;
    1516:	e2 e3       	ldi	r30, 0x32	; 50
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	80 83       	st	Z, r24
    151e:	0c c0       	rjmp	.+24     	; 0x1538 <DIO_SetPortValue+0x94>
			}



	}else
		printf("ERROR SELECTION PORTS FROM 0--3...");
    1520:	00 d0       	rcall	.+0      	; 0x1522 <DIO_SetPortValue+0x7e>
    1522:	ed b7       	in	r30, 0x3d	; 61
    1524:	fe b7       	in	r31, 0x3e	; 62
    1526:	31 96       	adiw	r30, 0x01	; 1
    1528:	8c ed       	ldi	r24, 0xDC	; 220
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	80 83       	st	Z, r24
    1530:	0e 94 86 14 	call	0x290c	; 0x290c <printf>
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0


}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <DIO_SetPortDirection>:
void  DIO_SetPortDirection (u8 U8PortIdcopy ,u8 U8PinDirCopy)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <DIO_SetPortDirection+0x6>
    154c:	00 d0       	rcall	.+0      	; 0x154e <DIO_SetPortDirection+0x8>
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	6a 83       	std	Y+2, r22	; 0x02
	if(U8PortIdcopy<=DIO_PORTD)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	84 30       	cpi	r24, 0x04	; 4
    155a:	98 f5       	brcc	.+102    	; 0x15c2 <DIO_SetPortDirection+0x7c>
	{

			switch (U8PortIdcopy)
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	3c 83       	std	Y+4, r19	; 0x04
    1564:	2b 83       	std	Y+3, r18	; 0x03
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	91 05       	cpc	r25, r1
    156e:	d1 f0       	breq	.+52     	; 0x15a4 <DIO_SetPortDirection+0x5e>
    1570:	2b 81       	ldd	r18, Y+3	; 0x03
    1572:	3c 81       	ldd	r19, Y+4	; 0x04
    1574:	22 30       	cpi	r18, 0x02	; 2
    1576:	31 05       	cpc	r19, r1
    1578:	2c f4       	brge	.+10     	; 0x1584 <DIO_SetPortDirection+0x3e>
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	61 f0       	breq	.+24     	; 0x159a <DIO_SetPortDirection+0x54>
    1582:	2b c0       	rjmp	.+86     	; 0x15da <DIO_SetPortDirection+0x94>
    1584:	2b 81       	ldd	r18, Y+3	; 0x03
    1586:	3c 81       	ldd	r19, Y+4	; 0x04
    1588:	22 30       	cpi	r18, 0x02	; 2
    158a:	31 05       	cpc	r19, r1
    158c:	81 f0       	breq	.+32     	; 0x15ae <DIO_SetPortDirection+0x68>
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	83 30       	cpi	r24, 0x03	; 3
    1594:	91 05       	cpc	r25, r1
    1596:	81 f0       	breq	.+32     	; 0x15b8 <DIO_SetPortDirection+0x72>
    1598:	20 c0       	rjmp	.+64     	; 0x15da <DIO_SetPortDirection+0x94>
			{
			case DIO_PORTA : SET_PORT(DDRA,0XFF); break;
    159a:	ea e3       	ldi	r30, 0x3A	; 58
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8f ef       	ldi	r24, 0xFF	; 255
    15a0:	80 83       	st	Z, r24
    15a2:	1b c0       	rjmp	.+54     	; 0x15da <DIO_SetPortDirection+0x94>
			case DIO_PORTB : SET_PORT(DDRB,0XFF); break;
    15a4:	e7 e3       	ldi	r30, 0x37	; 55
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	80 83       	st	Z, r24
    15ac:	16 c0       	rjmp	.+44     	; 0x15da <DIO_SetPortDirection+0x94>
			case DIO_PORTC : SET_PORT(DDRC,0XFF); break;
    15ae:	e4 e3       	ldi	r30, 0x34	; 52
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	80 83       	st	Z, r24
    15b6:	11 c0       	rjmp	.+34     	; 0x15da <DIO_SetPortDirection+0x94>
			case DIO_PORTD : SET_PORT(DDRD,0XFF); break;
    15b8:	e1 e3       	ldi	r30, 0x31	; 49
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	80 83       	st	Z, r24
    15c0:	0c c0       	rjmp	.+24     	; 0x15da <DIO_SetPortDirection+0x94>
			}


	}else
		printf("ERROR SELECTION PORTS FROM 0--3....");
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <DIO_SetPortDirection+0x7e>
    15c4:	ed b7       	in	r30, 0x3d	; 61
    15c6:	fe b7       	in	r31, 0x3e	; 62
    15c8:	31 96       	adiw	r30, 0x01	; 1
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	91 83       	std	Z+1, r25	; 0x01
    15d0:	80 83       	st	Z, r24
    15d2:	0e 94 86 14 	call	0x290c	; 0x290c <printf>
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0

}
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <ADC_voidInit>:
#include "ADC_config.h"
#include "avr/io.h"
#include "util/delay.h"

void ADC_voidInit (void)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
		#if ADC_VREF == AREF
			CLR_BIT(ADMUX , ADMUX_REFS0) ;
			CLR_BIT(ADMUX , ADMUX_REFS1) ;

		#elif ADC_VREF == AVCC
			SET_BIT(ADMUX , ADMUX_REFS0) ;
    15f0:	a7 e2       	ldi	r26, 0x27	; 39
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e7 e2       	ldi	r30, 0x27	; 39
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	80 64       	ori	r24, 0x40	; 64
    15fc:	8c 93       	st	X, r24
			CLR_BIT(ADMUX , ADMUX_REFS1) ;
    15fe:	a7 e2       	ldi	r26, 0x27	; 39
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e7 e2       	ldi	r30, 0x27	; 39
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8f 77       	andi	r24, 0x7F	; 127
    160a:	8c 93       	st	X, r24
		#endif


		/*Set Left Adjust Result*/
		#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
				CLR_BIT(ADMUX , ADMUX_ADLAR) ;
    160c:	a7 e2       	ldi	r26, 0x27	; 39
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e7 e2       	ldi	r30, 0x27	; 39
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8f 7d       	andi	r24, 0xDF	; 223
    1618:	8c 93       	st	X, r24
			#error "Wrong ADC_ADJUSTMENT config"

		#endif

		/*Set Prescaler Value*/
		ADCSRA &= ADC_PRE_MASK ;
    161a:	a6 e2       	ldi	r26, 0x26	; 38
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e6 e2       	ldi	r30, 0x26	; 38
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	88 7f       	andi	r24, 0xF8	; 248
    1626:	8c 93       	st	X, r24
		ADCSRA |= ADC_PRESCALLER ;
    1628:	a6 e2       	ldi	r26, 0x26	; 38
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e6 e2       	ldi	r30, 0x26	; 38
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	87 60       	ori	r24, 0x07	; 7
    1634:	8c 93       	st	X, r24

		/*Enable ADC Peripheral*/
		#if ADC_STATUS == ADC_DISABLE
			CLR_BIT(ADCSRA , ADCSRA_ADEN) ;
		#elif ADC_STATUS == ADC_ENABLE
			SET_BIT(ADCSRA , ADCSRA_ADEN) ;
    1636:	a6 e2       	ldi	r26, 0x26	; 38
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e6 e2       	ldi	r30, 0x26	; 38
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 68       	ori	r24, 0x80	; 128
    1642:	8c 93       	st	X, r24
		#error "Wrong ADC_STATUS config"
		#endif

		/*Enable ADC Interrupt*/
		#if INT_STATUS == INT_DISABLE
			CLR_BIT(ADCSRA , ADCSRA_ADIE) ;
    1644:	a6 e2       	ldi	r26, 0x26	; 38
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e6 e2       	ldi	r30, 0x26	; 38
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	87 7f       	andi	r24, 0xF7	; 247
    1650:	8c 93       	st	X, r24
		#elif INT_STATUS == INT_ENABLE
			SET_BIT(ADCSRA , ADCSRA_ADIE) ;
		#else
		#error "Wrong INT_STATUS config"
		#endif
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <ADC_u8GetChannelReading>:

u16 ADC_u8GetChannelReading (u8 ADC_CHANNELS)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	6d 97       	sbiw	r28, 0x1d	; 29
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	8d 8f       	std	Y+29, r24	; 0x1d
	u16 ADC_L=0; // ADC VALUE OF high register and low register
    166e:	1c 8e       	std	Y+28, r1	; 0x1c
    1670:	1b 8e       	std	Y+27, r1	; 0x1b
	u16 ADC_H=0;
    1672:	1a 8e       	std	Y+26, r1	; 0x1a
    1674:	19 8e       	std	Y+25, r1	; 0x19

		#if ADC_CHANNELS == ADC_CHANNEL0
		     DIO_SetPinDirection(DIO_PORTA,DIO_PIN0,DIO_INPUT) ;
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>

		#endif


	//step 1 : Clear MUX bits in ADMUX
	ADMUX   &= ADC_CH_MASK;
    1680:	a7 e2       	ldi	r26, 0x27	; 39
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e7 e2       	ldi	r30, 0x27	; 39
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	80 7e       	andi	r24, 0xE0	; 224
    168c:	8c 93       	st	X, r24

	//Step 2 : Set the required  ADC Channel Selection into the MUX bits
	ADMUX   |=ADC_CHANNELS;
    168e:	a7 e2       	ldi	r26, 0x27	; 39
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e7 e2       	ldi	r30, 0x27	; 39
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	90 81       	ld	r25, Z
    1698:	8d 8d       	ldd	r24, Y+29	; 0x1d
    169a:	89 2b       	or	r24, r25
    169c:	8c 93       	st	X, r24


	// Step 3 : Start Single Converstion
	SET_BIT(ADCSRA , ADCSRA_ADSC );
    169e:	a6 e2       	ldi	r26, 0x26	; 38
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e6 e2       	ldi	r30, 0x26	; 38
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	80 64       	ori	r24, 0x40	; 64
    16aa:	8c 93       	st	X, r24


	// Step 4 :  Polling (busy wait ) until the conversion complete flag is set
	while((GET_BIT(ADCSRA , ADCSRA_ADIF)) == 0);
    16ac:	e6 e2       	ldi	r30, 0x26	; 38
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	82 95       	swap	r24
    16b4:	8f 70       	andi	r24, 0x0F	; 15
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	81 70       	andi	r24, 0x01	; 1
    16bc:	90 70       	andi	r25, 0x00	; 0
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	a9 f3       	breq	.-22     	; 0x16ac <ADC_u8GetChannelReading+0x54>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	a0 e2       	ldi	r26, 0x20	; 32
    16c8:	b1 e4       	ldi	r27, 0x41	; 65
    16ca:	8d 8b       	std	Y+21, r24	; 0x15
    16cc:	9e 8b       	std	Y+22, r25	; 0x16
    16ce:	af 8b       	std	Y+23, r26	; 0x17
    16d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16d2:	6d 89       	ldd	r22, Y+21	; 0x15
    16d4:	7e 89       	ldd	r23, Y+22	; 0x16
    16d6:	8f 89       	ldd	r24, Y+23	; 0x17
    16d8:	98 8d       	ldd	r25, Y+24	; 0x18
    16da:	2b ea       	ldi	r18, 0xAB	; 171
    16dc:	3a ea       	ldi	r19, 0xAA	; 170
    16de:	4a e2       	ldi	r20, 0x2A	; 42
    16e0:	50 e4       	ldi	r21, 0x40	; 64
    16e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	89 8b       	std	Y+17, r24	; 0x11
    16ec:	9a 8b       	std	Y+18, r25	; 0x12
    16ee:	ab 8b       	std	Y+19, r26	; 0x13
    16f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16f2:	69 89       	ldd	r22, Y+17	; 0x11
    16f4:	7a 89       	ldd	r23, Y+18	; 0x12
    16f6:	8b 89       	ldd	r24, Y+19	; 0x13
    16f8:	9c 89       	ldd	r25, Y+20	; 0x14
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e8       	ldi	r20, 0x80	; 128
    1700:	5f e3       	ldi	r21, 0x3F	; 63
    1702:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1706:	88 23       	and	r24, r24
    1708:	1c f4       	brge	.+6      	; 0x1710 <ADC_u8GetChannelReading+0xb8>
		__ticks = 1;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	88 8b       	std	Y+16, r24	; 0x10
    170e:	91 c0       	rjmp	.+290    	; 0x1832 <ADC_u8GetChannelReading+0x1da>
	else if (__tmp > 255)
    1710:	69 89       	ldd	r22, Y+17	; 0x11
    1712:	7a 89       	ldd	r23, Y+18	; 0x12
    1714:	8b 89       	ldd	r24, Y+19	; 0x13
    1716:	9c 89       	ldd	r25, Y+20	; 0x14
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	4f e7       	ldi	r20, 0x7F	; 127
    171e:	53 e4       	ldi	r21, 0x43	; 67
    1720:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1724:	18 16       	cp	r1, r24
    1726:	0c f0       	brlt	.+2      	; 0x172a <ADC_u8GetChannelReading+0xd2>
    1728:	7b c0       	rjmp	.+246    	; 0x1820 <ADC_u8GetChannelReading+0x1c8>
	{
		_delay_ms(__us / 1000.0);
    172a:	6d 89       	ldd	r22, Y+21	; 0x15
    172c:	7e 89       	ldd	r23, Y+22	; 0x16
    172e:	8f 89       	ldd	r24, Y+23	; 0x17
    1730:	98 8d       	ldd	r25, Y+24	; 0x18
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	4a e7       	ldi	r20, 0x7A	; 122
    1738:	54 e4       	ldi	r21, 0x44	; 68
    173a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	8c 87       	std	Y+12, r24	; 0x0c
    1744:	9d 87       	std	Y+13, r25	; 0x0d
    1746:	ae 87       	std	Y+14, r26	; 0x0e
    1748:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174a:	6c 85       	ldd	r22, Y+12	; 0x0c
    174c:	7d 85       	ldd	r23, Y+13	; 0x0d
    174e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1750:	9f 85       	ldd	r25, Y+15	; 0x0f
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4a ef       	ldi	r20, 0xFA	; 250
    1758:	54 e4       	ldi	r21, 0x44	; 68
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	88 87       	std	Y+8, r24	; 0x08
    1764:	99 87       	std	Y+9, r25	; 0x09
    1766:	aa 87       	std	Y+10, r26	; 0x0a
    1768:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    176a:	68 85       	ldd	r22, Y+8	; 0x08
    176c:	79 85       	ldd	r23, Y+9	; 0x09
    176e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1770:	9b 85       	ldd	r25, Y+11	; 0x0b
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e8       	ldi	r20, 0x80	; 128
    1778:	5f e3       	ldi	r21, 0x3F	; 63
    177a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    177e:	88 23       	and	r24, r24
    1780:	2c f4       	brge	.+10     	; 0x178c <ADC_u8GetChannelReading+0x134>
		__ticks = 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9f 83       	std	Y+7, r25	; 0x07
    1788:	8e 83       	std	Y+6, r24	; 0x06
    178a:	3f c0       	rjmp	.+126    	; 0x180a <ADC_u8GetChannelReading+0x1b2>
	else if (__tmp > 65535)
    178c:	68 85       	ldd	r22, Y+8	; 0x08
    178e:	79 85       	ldd	r23, Y+9	; 0x09
    1790:	8a 85       	ldd	r24, Y+10	; 0x0a
    1792:	9b 85       	ldd	r25, Y+11	; 0x0b
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	3f ef       	ldi	r19, 0xFF	; 255
    1798:	4f e7       	ldi	r20, 0x7F	; 127
    179a:	57 e4       	ldi	r21, 0x47	; 71
    179c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17a0:	18 16       	cp	r1, r24
    17a2:	4c f5       	brge	.+82     	; 0x17f6 <ADC_u8GetChannelReading+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    17a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    17a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    17aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e2       	ldi	r20, 0x20	; 32
    17b2:	51 e4       	ldi	r21, 0x41	; 65
    17b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	bc 01       	movw	r22, r24
    17be:	cd 01       	movw	r24, r26
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9f 83       	std	Y+7, r25	; 0x07
    17ca:	8e 83       	std	Y+6, r24	; 0x06
    17cc:	0f c0       	rjmp	.+30     	; 0x17ec <ADC_u8GetChannelReading+0x194>
    17ce:	88 ec       	ldi	r24, 0xC8	; 200
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	9d 83       	std	Y+5, r25	; 0x05
    17d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	9d 81       	ldd	r25, Y+5	; 0x05
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <ADC_u8GetChannelReading+0x182>
    17de:	9d 83       	std	Y+5, r25	; 0x05
    17e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e2:	8e 81       	ldd	r24, Y+6	; 0x06
    17e4:	9f 81       	ldd	r25, Y+7	; 0x07
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	9f 83       	std	Y+7, r25	; 0x07
    17ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ec:	8e 81       	ldd	r24, Y+6	; 0x06
    17ee:	9f 81       	ldd	r25, Y+7	; 0x07
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	69 f7       	brne	.-38     	; 0x17ce <ADC_u8GetChannelReading+0x176>
    17f4:	24 c0       	rjmp	.+72     	; 0x183e <ADC_u8GetChannelReading+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f6:	68 85       	ldd	r22, Y+8	; 0x08
    17f8:	79 85       	ldd	r23, Y+9	; 0x09
    17fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    17fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9f 83       	std	Y+7, r25	; 0x07
    1808:	8e 83       	std	Y+6, r24	; 0x06
    180a:	8e 81       	ldd	r24, Y+6	; 0x06
    180c:	9f 81       	ldd	r25, Y+7	; 0x07
    180e:	9b 83       	std	Y+3, r25	; 0x03
    1810:	8a 83       	std	Y+2, r24	; 0x02
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	9b 81       	ldd	r25, Y+3	; 0x03
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <ADC_u8GetChannelReading+0x1be>
    181a:	9b 83       	std	Y+3, r25	; 0x03
    181c:	8a 83       	std	Y+2, r24	; 0x02
    181e:	0f c0       	rjmp	.+30     	; 0x183e <ADC_u8GetChannelReading+0x1e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1820:	69 89       	ldd	r22, Y+17	; 0x11
    1822:	7a 89       	ldd	r23, Y+18	; 0x12
    1824:	8b 89       	ldd	r24, Y+19	; 0x13
    1826:	9c 89       	ldd	r25, Y+20	; 0x14
    1828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	88 8b       	std	Y+16, r24	; 0x10
    1832:	88 89       	ldd	r24, Y+16	; 0x10
    1834:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	8a 95       	dec	r24
    183a:	f1 f7       	brne	.-4      	; 0x1838 <ADC_u8GetChannelReading+0x1e0>
    183c:	89 83       	std	Y+1, r24	; 0x01
	/* Step 5 :  Clear Conversion Complete Flag
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    */
	// Step 7 :   return value in ADCH & ADCL (RIGHT adjustment result 10 bits)

	    ADC_L = (u16)ADCL;		/* Read lower byte*/
    183e:	e4 e2       	ldi	r30, 0x24	; 36
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9c 8f       	std	Y+28, r25	; 0x1c
    184a:	8b 8f       	std	Y+27, r24	; 0x1b
	    ADC_H = (u16)ADCH*256;		/* Read higher 2 bits and
    184c:	e5 e2       	ldi	r30, 0x25	; 37
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	98 2f       	mov	r25, r24
    1858:	88 27       	eor	r24, r24
    185a:	9a 8f       	std	Y+26, r25	; 0x1a
    185c:	89 8f       	std	Y+25, r24	; 0x19
						Multiply with weight */
	    ADC_H = ADC_H + ADC_L;
    185e:	29 8d       	ldd	r18, Y+25	; 0x19
    1860:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1862:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1864:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1866:	82 0f       	add	r24, r18
    1868:	93 1f       	adc	r25, r19
    186a:	9a 8f       	std	Y+26, r25	; 0x1a
    186c:	89 8f       	std	Y+25, r24	; 0x19

	// Step 8 :   return value in ADCL (RIGHT adjustment result 8 bits)  BECUASE WE ONLY NEED LOWEST 8 BITS.. (HIGHEST TEMPERATURE NEEDED IS ONLY < 250 C).....

	return ADC_H;
    186e:	89 8d       	ldd	r24, Y+25	; 0x19
    1870:	9a 8d       	ldd	r25, Y+26	; 0x1a
}
    1872:	6d 96       	adiw	r28, 0x1d	; 29
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <LCD_VoidSendChar>:




void LCD_VoidSendChar(u8 U8DataCopy)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	2f 97       	sbiw	r28, 0x0f	; 15
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	8f 87       	std	Y+15, r24	; 0x0f
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	6f ef       	ldi	r22, 0xFF	; 255
    189e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	61 e0       	ldi	r22, 0x01	; 1
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	62 e0       	ldi	r22, 0x02	; 2
    18b0:	41 e0       	ldi	r20, 0x01	; 1
    18b2:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,DIO_OUTPUT);
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	63 e0       	ldi	r22, 0x03	; 3
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_HIGH);
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	41 e0       	ldi	r20, 0x01	; 1
    18c6:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	62 e0       	ldi	r22, 0x02	; 2
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>

	// SEND COMMOND
	DIO_SetPortValue(LCD_DATA_PORT,U8DataCopy);
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    18d8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPortValue>

	// SET ENABLE AND WAIT FOR IMS THEN RESET IT ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_HIGH);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	63 e0       	ldi	r22, 0x03	; 3
    18e0:	41 e0       	ldi	r20, 0x01	; 1
    18e2:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a0 ea       	ldi	r26, 0xA0	; 160
    18ec:	b1 e4       	ldi	r27, 0x41	; 65
    18ee:	8b 87       	std	Y+11, r24	; 0x0b
    18f0:	9c 87       	std	Y+12, r25	; 0x0c
    18f2:	ad 87       	std	Y+13, r26	; 0x0d
    18f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a ef       	ldi	r20, 0xFA	; 250
    1904:	54 e4       	ldi	r21, 0x44	; 68
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	8f 83       	std	Y+7, r24	; 0x07
    1910:	98 87       	std	Y+8, r25	; 0x08
    1912:	a9 87       	std	Y+9, r26	; 0x09
    1914:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1916:	6f 81       	ldd	r22, Y+7	; 0x07
    1918:	78 85       	ldd	r23, Y+8	; 0x08
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	2c f4       	brge	.+10     	; 0x1938 <LCD_VoidSendChar+0xb4>
		__ticks = 1;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9e 83       	std	Y+6, r25	; 0x06
    1934:	8d 83       	std	Y+5, r24	; 0x05
    1936:	3f c0       	rjmp	.+126    	; 0x19b6 <LCD_VoidSendChar+0x132>
	else if (__tmp > 65535)
    1938:	6f 81       	ldd	r22, Y+7	; 0x07
    193a:	78 85       	ldd	r23, Y+8	; 0x08
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	3f ef       	ldi	r19, 0xFF	; 255
    1944:	4f e7       	ldi	r20, 0x7F	; 127
    1946:	57 e4       	ldi	r21, 0x47	; 71
    1948:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    194c:	18 16       	cp	r1, r24
    194e:	4c f5       	brge	.+82     	; 0x19a2 <LCD_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1950:	6b 85       	ldd	r22, Y+11	; 0x0b
    1952:	7c 85       	ldd	r23, Y+12	; 0x0c
    1954:	8d 85       	ldd	r24, Y+13	; 0x0d
    1956:	9e 85       	ldd	r25, Y+14	; 0x0e
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <LCD_VoidSendChar+0x114>
    197a:	88 ec       	ldi	r24, 0xC8	; 200
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <LCD_VoidSendChar+0x102>
    198a:	9c 83       	std	Y+4, r25	; 0x04
    198c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	8d 81       	ldd	r24, Y+5	; 0x05
    1990:	9e 81       	ldd	r25, Y+6	; 0x06
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	69 f7       	brne	.-38     	; 0x197a <LCD_VoidSendChar+0xf6>
    19a0:	14 c0       	rjmp	.+40     	; 0x19ca <LCD_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_VoidSendChar+0x13e>
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_LOW);
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	63 e0       	ldi	r22, 0x03	; 3
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>


}
    19d4:	2f 96       	adiw	r28, 0x0f	; 15
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <LCD_VoidSendCommand>:
void LCD_VoidSendCommand(u8 U8CommandCopy)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	2f 97       	sbiw	r28, 0x0f	; 15
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	8f 87       	std	Y+15, r24	; 0x0f
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	6f ef       	ldi	r22, 0xFF	; 255
    1a00:	0e 94 a3 0a 	call	0x1546	; 0x1546 <DIO_SetPortDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	62 e0       	ldi	r22, 0x02	; 2
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,DIO_OUTPUT);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	63 e0       	ldi	r22, 0x03	; 3
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	62 e0       	ldi	r22, 0x02	; 2
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>

	// SEND COMMOND
	DIO_SetPortValue(LCD_DATA_PORT,U8CommandCopy);
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a3a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_SetPortValue>

	// SET ENABLE AND WAIT FOR IMS THEN RESET IT ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_HIGH);
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	63 e0       	ldi	r22, 0x03	; 3
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a4e:	b1 e4       	ldi	r27, 0x41	; 65
    1a50:	8b 87       	std	Y+11, r24	; 0x0b
    1a52:	9c 87       	std	Y+12, r25	; 0x0c
    1a54:	ad 87       	std	Y+13, r26	; 0x0d
    1a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a ef       	ldi	r20, 0xFA	; 250
    1a66:	54 e4       	ldi	r21, 0x44	; 68
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8f 83       	std	Y+7, r24	; 0x07
    1a72:	98 87       	std	Y+8, r25	; 0x08
    1a74:	a9 87       	std	Y+9, r26	; 0x09
    1a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	4f e7       	ldi	r20, 0x7F	; 127
    1aa8:	57 e4       	ldi	r21, 0x47	; 71
    1aaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e2       	ldi	r20, 0x20	; 32
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <LCD_VoidSendCommand+0x114>
    1adc:	88 ec       	ldi	r24, 0xC8	; 200
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <LCD_VoidSendCommand+0x102>
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f7       	brne	.-38     	; 0x1adc <LCD_VoidSendCommand+0xf6>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LCD_VoidSendCommand+0x13e>
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_LOW);
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	63 e0       	ldi	r22, 0x03	; 3
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>


}
    1b36:	2f 96       	adiw	r28, 0x0f	; 15
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <LCD_voidSendData>:
void LCD_voidSendData(const char* Copy_pcString)
{     u8 Local_u8Counter=0;
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <LCD_voidSendData+0x6>
    1b4e:	0f 92       	push	r0
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	9b 83       	std	Y+3, r25	; 0x03
    1b56:	8a 83       	std	Y+2, r24	; 0x02
    1b58:	19 82       	std	Y+1, r1	; 0x01
    1b5a:	0e c0       	rjmp	.+28     	; 0x1b78 <LCD_voidSendData+0x30>
      while  ( Copy_pcString[Local_u8Counter] != '\0' ){
    	  LCD_VoidSendChar(Copy_pcString[Local_u8Counter]);
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	9b 81       	ldd	r25, Y+3	; 0x03
    1b66:	fc 01       	movw	r30, r24
    1b68:	e2 0f       	add	r30, r18
    1b6a:	f3 1f       	adc	r31, r19
    1b6c:	80 81       	ld	r24, Z
    1b6e:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_VoidSendChar>
    	  Local_u8Counter ++;
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	8f 5f       	subi	r24, 0xFF	; 255
    1b76:	89 83       	std	Y+1, r24	; 0x01


}
void LCD_voidSendData(const char* Copy_pcString)
{     u8 Local_u8Counter=0;
      while  ( Copy_pcString[Local_u8Counter] != '\0' ){
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	9b 81       	ldd	r25, Y+3	; 0x03
    1b82:	fc 01       	movw	r30, r24
    1b84:	e2 0f       	add	r30, r18
    1b86:	f3 1f       	adc	r31, r19
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 23       	and	r24, r24
    1b8c:	39 f7       	brne	.-50     	; 0x1b5c <LCD_voidSendData+0x14>
    	  LCD_VoidSendChar(Copy_pcString[Local_u8Counter]);
    	  Local_u8Counter ++;
      }
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <LCD_Voidinit>:
void LCD_Voidinit(void)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	e8 97       	sbiw	r28, 0x38	; 56
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
	// DEFINE THE DIRECTIONS OF LCD PINS.....
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	62 e0       	ldi	r22, 0x02	; 2
    1bbc:	41 e0       	ldi	r20, 0x01	; 1
    1bbe:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>


	//reset RS AND RW ...
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	62 e0       	ldi	r22, 0x02	; 2
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 e2       	ldi	r26, 0x20	; 32
    1bdc:	b2 e4       	ldi	r27, 0x42	; 66
    1bde:	8d ab       	std	Y+53, r24	; 0x35
    1be0:	9e ab       	std	Y+54, r25	; 0x36
    1be2:	af ab       	std	Y+55, r26	; 0x37
    1be4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6d a9       	ldd	r22, Y+53	; 0x35
    1be8:	7e a9       	ldd	r23, Y+54	; 0x36
    1bea:	8f a9       	ldd	r24, Y+55	; 0x37
    1bec:	98 ad       	ldd	r25, Y+56	; 0x38
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a ef       	ldi	r20, 0xFA	; 250
    1bf4:	54 e4       	ldi	r21, 0x44	; 68
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	89 ab       	std	Y+49, r24	; 0x31
    1c00:	9a ab       	std	Y+50, r25	; 0x32
    1c02:	ab ab       	std	Y+51, r26	; 0x33
    1c04:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c06:	69 a9       	ldd	r22, Y+49	; 0x31
    1c08:	7a a9       	ldd	r23, Y+50	; 0x32
    1c0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <LCD_Voidinit+0x8e>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	98 ab       	std	Y+48, r25	; 0x30
    1c24:	8f a7       	std	Y+47, r24	; 0x2f
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <LCD_Voidinit+0x10c>
	else if (__tmp > 65535)
    1c28:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <LCD_Voidinit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6d a9       	ldd	r22, Y+53	; 0x35
    1c42:	7e a9       	ldd	r23, Y+54	; 0x36
    1c44:	8f a9       	ldd	r24, Y+55	; 0x37
    1c46:	98 ad       	ldd	r25, Y+56	; 0x38
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	98 ab       	std	Y+48, r25	; 0x30
    1c66:	8f a7       	std	Y+47, r24	; 0x2f
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <LCD_Voidinit+0xee>
    1c6a:	88 ec       	ldi	r24, 0xC8	; 200
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9e a7       	std	Y+46, r25	; 0x2e
    1c70:	8d a7       	std	Y+45, r24	; 0x2d
    1c72:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c74:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_Voidinit+0xdc>
    1c7a:	9e a7       	std	Y+46, r25	; 0x2e
    1c7c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c80:	98 a9       	ldd	r25, Y+48	; 0x30
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	98 ab       	std	Y+48, r25	; 0x30
    1c86:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <LCD_Voidinit+0xd0>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <LCD_Voidinit+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	69 a9       	ldd	r22, Y+49	; 0x31
    1c94:	7a a9       	ldd	r23, Y+50	; 0x32
    1c96:	8b a9       	ldd	r24, Y+51	; 0x33
    1c98:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	98 ab       	std	Y+48, r25	; 0x30
    1ca4:	8f a7       	std	Y+47, r24	; 0x2f
    1ca6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca8:	98 a9       	ldd	r25, Y+48	; 0x30
    1caa:	9c a7       	std	Y+44, r25	; 0x2c
    1cac:	8b a7       	std	Y+43, r24	; 0x2b
    1cae:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_Voidinit+0x118>
    1cb6:	9c a7       	std	Y+44, r25	; 0x2c
    1cb8:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	/*Function set command: 2 lines(N = 1), 5*8 Font size (F = 0 )*/
	LCD_VoidSendCommand(FUNCTION_SET);
    1cba:	88 e3       	ldi	r24, 0x38	; 56
    1cbc:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VoidSendCommand>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e8       	ldi	r26, 0x80	; 128
    1cc6:	bf e3       	ldi	r27, 0x3F	; 63
    1cc8:	8f a3       	std	Y+39, r24	; 0x27
    1cca:	98 a7       	std	Y+40, r25	; 0x28
    1ccc:	a9 a7       	std	Y+41, r26	; 0x29
    1cce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a ef       	ldi	r20, 0xFA	; 250
    1cde:	54 e4       	ldi	r21, 0x44	; 68
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	8b a3       	std	Y+35, r24	; 0x23
    1cea:	9c a3       	std	Y+36, r25	; 0x24
    1cec:	ad a3       	std	Y+37, r26	; 0x25
    1cee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cf0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <LCD_Voidinit+0x178>
		__ticks = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9a a3       	std	Y+34, r25	; 0x22
    1d0e:	89 a3       	std	Y+33, r24	; 0x21
    1d10:	3f c0       	rjmp	.+126    	; 0x1d90 <LCD_Voidinit+0x1f6>
	else if (__tmp > 65535)
    1d12:	6b a1       	ldd	r22, Y+35	; 0x23
    1d14:	7c a1       	ldd	r23, Y+36	; 0x24
    1d16:	8d a1       	ldd	r24, Y+37	; 0x25
    1d18:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	4c f5       	brge	.+82     	; 0x1d7c <LCD_Voidinit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9a a3       	std	Y+34, r25	; 0x22
    1d50:	89 a3       	std	Y+33, r24	; 0x21
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <LCD_Voidinit+0x1d8>
    1d54:	88 ec       	ldi	r24, 0xC8	; 200
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	98 a3       	std	Y+32, r25	; 0x20
    1d5a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d5e:	98 a1       	ldd	r25, Y+32	; 0x20
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_Voidinit+0x1c6>
    1d64:	98 a3       	std	Y+32, r25	; 0x20
    1d66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d68:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	9a a3       	std	Y+34, r25	; 0x22
    1d70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d72:	89 a1       	ldd	r24, Y+33	; 0x21
    1d74:	9a a1       	ldd	r25, Y+34	; 0x22
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	69 f7       	brne	.-38     	; 0x1d54 <LCD_Voidinit+0x1ba>
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <LCD_Voidinit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d80:	8d a1       	ldd	r24, Y+37	; 0x25
    1d82:	9e a1       	ldd	r25, Y+38	; 0x26
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9a a3       	std	Y+34, r25	; 0x22
    1d8e:	89 a3       	std	Y+33, r24	; 0x21
    1d90:	89 a1       	ldd	r24, Y+33	; 0x21
    1d92:	9a a1       	ldd	r25, Y+34	; 0x22
    1d94:	9e 8f       	std	Y+30, r25	; 0x1e
    1d96:	8d 8f       	std	Y+29, r24	; 0x1d
    1d98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD_Voidinit+0x202>
    1da0:	9e 8f       	std	Y+30, r25	; 0x1e
    1da2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Display on off control: display enable, disable cursor, no blink cursor*/
	LCD_VoidSendCommand(DISPLAY_SET);
    1da4:	8c e0       	ldi	r24, 0x0C	; 12
    1da6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VoidSendCommand>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a0 e8       	ldi	r26, 0x80	; 128
    1db0:	bf e3       	ldi	r27, 0x3F	; 63
    1db2:	89 8f       	std	Y+25, r24	; 0x19
    1db4:	9a 8f       	std	Y+26, r25	; 0x1a
    1db6:	ab 8f       	std	Y+27, r26	; 0x1b
    1db8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	69 8d       	ldd	r22, Y+25	; 0x19
    1dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	4a ef       	ldi	r20, 0xFA	; 250
    1dc8:	54 e4       	ldi	r21, 0x44	; 68
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8d 8b       	std	Y+21, r24	; 0x15
    1dd4:	9e 8b       	std	Y+22, r25	; 0x16
    1dd6:	af 8b       	std	Y+23, r26	; 0x17
    1dd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dda:	6d 89       	ldd	r22, Y+21	; 0x15
    1ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dde:	8f 89       	ldd	r24, Y+23	; 0x17
    1de0:	98 8d       	ldd	r25, Y+24	; 0x18
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5f e3       	ldi	r21, 0x3F	; 63
    1dea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dee:	88 23       	and	r24, r24
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <LCD_Voidinit+0x262>
		__ticks = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9c 8b       	std	Y+20, r25	; 0x14
    1df8:	8b 8b       	std	Y+19, r24	; 0x13
    1dfa:	3f c0       	rjmp	.+126    	; 0x1e7a <LCD_Voidinit+0x2e0>
	else if (__tmp > 65535)
    1dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1e00:	8f 89       	ldd	r24, Y+23	; 0x17
    1e02:	98 8d       	ldd	r25, Y+24	; 0x18
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	4c f5       	brge	.+82     	; 0x1e66 <LCD_Voidinit+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e14:	69 8d       	ldd	r22, Y+25	; 0x19
    1e16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9c 8b       	std	Y+20, r25	; 0x14
    1e3a:	8b 8b       	std	Y+19, r24	; 0x13
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <LCD_Voidinit+0x2c2>
    1e3e:	88 ec       	ldi	r24, 0xC8	; 200
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9a 8b       	std	Y+18, r25	; 0x12
    1e44:	89 8b       	std	Y+17, r24	; 0x11
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	9a 89       	ldd	r25, Y+18	; 0x12
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_Voidinit+0x2b0>
    1e4e:	9a 8b       	std	Y+18, r25	; 0x12
    1e50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	9c 8b       	std	Y+20, r25	; 0x14
    1e5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <LCD_Voidinit+0x2a4>
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <LCD_Voidinit+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	6d 89       	ldd	r22, Y+21	; 0x15
    1e68:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9c 8b       	std	Y+20, r25	; 0x14
    1e78:	8b 8b       	std	Y+19, r24	; 0x13
    1e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7e:	98 8b       	std	Y+16, r25	; 0x10
    1e80:	8f 87       	std	Y+15, r24	; 0x0f
    1e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e84:	98 89       	ldd	r25, Y+16	; 0x10
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_Voidinit+0x2ec>
    1e8a:	98 8b       	std	Y+16, r25	; 0x10
    1e8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Clear display*/
	LCD_VoidSendCommand(CLEAR);
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VoidSendCommand>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e8       	ldi	r26, 0x80	; 128
    1e9a:	bf e3       	ldi	r27, 0x3F	; 63
    1e9c:	8b 87       	std	Y+11, r24	; 0x0b
    1e9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ea0:	ad 87       	std	Y+13, r26	; 0x0d
    1ea2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a ef       	ldi	r20, 0xFA	; 250
    1eb2:	54 e4       	ldi	r21, 0x44	; 68
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	8f 83       	std	Y+7, r24	; 0x07
    1ebe:	98 87       	std	Y+8, r25	; 0x08
    1ec0:	a9 87       	std	Y+9, r26	; 0x09
    1ec2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec6:	78 85       	ldd	r23, Y+8	; 0x08
    1ec8:	89 85       	ldd	r24, Y+9	; 0x09
    1eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <LCD_Voidinit+0x34c>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <LCD_Voidinit+0x3ca>
	else if (__tmp > 65535)
    1ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee8:	78 85       	ldd	r23, Y+8	; 0x08
    1eea:	89 85       	ldd	r24, Y+9	; 0x09
    1eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <LCD_Voidinit+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9e 83       	std	Y+6, r25	; 0x06
    1f24:	8d 83       	std	Y+5, r24	; 0x05
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <LCD_Voidinit+0x3ac>
    1f28:	88 ec       	ldi	r24, 0xC8	; 200
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_Voidinit+0x39a>
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <LCD_Voidinit+0x38e>
    1f4e:	14 c0       	rjmp	.+40     	; 0x1f78 <LCD_Voidinit+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	6f 81       	ldd	r22, Y+7	; 0x07
    1f52:	78 85       	ldd	r23, Y+8	; 0x08
    1f54:	89 85       	ldd	r24, Y+9	; 0x09
    1f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCD_Voidinit+0x3d6>
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1f78:	e8 96       	adiw	r28, 0x38	; 56
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <KEYPAD_VoidInit>:
#include "../../MCAL/DIO/DIO.h"
#include "avr/delay.h"


void KEYPAD_VoidInit(void)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
	/*step1 configuring rows direction and pullup ressistor(internal)....	 */
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R0_PIN,DIO_INPUT);
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R1_PIN,DIO_INPUT);
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	61 e0       	ldi	r22, 0x01	; 1
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R2_PIN,DIO_INPUT);
    1fa6:	83 e0       	ldi	r24, 0x03	; 3
    1fa8:	62 e0       	ldi	r22, 0x02	; 2
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_R3_PIN,DIO_INPUT);
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	63 e0       	ldi	r22, 0x03	; 3
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>


	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R0_PIN,DIO_HIGH);
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R1_PIN,DIO_HIGH);
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R2_PIN,DIO_HIGH);
    1fce:	83 e0       	ldi	r24, 0x03	; 3
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_R3_PIN,DIO_HIGH);
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	63 e0       	ldi	r22, 0x03	; 3
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>


	/*STEP2 CONFIGURING COLUMNS DIRECTION AND INITIALING WITH HIGH...	 */
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C0_PIN,DIO_OUTPUT);
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	64 e0       	ldi	r22, 0x04	; 4
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C1_PIN,DIO_OUTPUT);
    1fec:	83 e0       	ldi	r24, 0x03	; 3
    1fee:	65 e0       	ldi	r22, 0x05	; 5
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C2_PIN,DIO_OUTPUT);
    1ff6:	83 e0       	ldi	r24, 0x03	; 3
    1ff8:	66 e0       	ldi	r22, 0x06	; 6
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_C3_PIN,DIO_OUTPUT);
    2000:	83 e0       	ldi	r24, 0x03	; 3
    2002:	67 e0       	ldi	r22, 0x07	; 7
    2004:	41 e0       	ldi	r20, 0x01	; 1
    2006:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinDirection>


	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C0_PIN,DIO_HIGH);
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	64 e0       	ldi	r22, 0x04	; 4
    200e:	41 e0       	ldi	r20, 0x01	; 1
    2010:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C1_PIN,DIO_HIGH);
    2014:	83 e0       	ldi	r24, 0x03	; 3
    2016:	65 e0       	ldi	r22, 0x05	; 5
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C2_PIN,DIO_HIGH);
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	66 e0       	ldi	r22, 0x06	; 6
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT,KEYPAD_C3_PIN,DIO_HIGH);
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	67 e0       	ldi	r22, 0x07	; 7
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>

}
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <KEYPAD_U8GetPressedKey>:



u8 KEYPAD_U8GetPressedKey(void)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	ae 97       	sbiw	r28, 0x2e	; 46
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61


	u8 U8RowLOCAL=0;
    204c:	19 8a       	std	Y+17, r1	; 0x11
	u8 U8ColumnLocal=0;
    204e:	18 8a       	std	Y+16, r1	; 0x10

	u8 KPD_RowPinArr[ROWS_NUMBER]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
    2050:	1a 8a       	std	Y+18, r1	; 0x12
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	8b 8b       	std	Y+19, r24	; 0x13
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	8c 8b       	std	Y+20, r24	; 0x14
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	8d 8b       	std	Y+21, r24	; 0x15
	u8 KPD_ColumnPinArr[COLUMN_NUMBER]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
    205e:	84 e0       	ldi	r24, 0x04	; 4
    2060:	8e 8b       	std	Y+22, r24	; 0x16
    2062:	85 e0       	ldi	r24, 0x05	; 5
    2064:	8f 8b       	std	Y+23, r24	; 0x17
    2066:	86 e0       	ldi	r24, 0x06	; 6
    2068:	88 8f       	std	Y+24, r24	; 0x18
    206a:	87 e0       	ldi	r24, 0x07	; 7
    206c:	89 8f       	std	Y+25, r24	; 0x19

while(1)
{
     for(U8ColumnLocal=0;U8ColumnLocal<COLUMN_NUMBER;U8ColumnLocal++)
    206e:	18 8a       	std	Y+16, r1	; 0x10
    2070:	fa c0       	rjmp	.+500    	; 0x2266 <KEYPAD_U8GetPressedKey+0x22e>
     {
 		//active one columne at time ---> low
 		DIO_SetPinValue( KEYPAD_PORT , KPD_ColumnPinArr[U8ColumnLocal] , DIO_LOW);
    2072:	88 89       	ldd	r24, Y+16	; 0x10
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	ce 01       	movw	r24, r28
    207a:	46 96       	adiw	r24, 0x16	; 22
    207c:	fc 01       	movw	r30, r24
    207e:	e2 0f       	add	r30, r18
    2080:	f3 1f       	adc	r31, r19
    2082:	90 81       	ld	r25, Z
    2084:	83 e0       	ldi	r24, 0x03	; 3
    2086:	69 2f       	mov	r22, r25
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>

 		//scan R0 to R3
    	 for(U8RowLOCAL=0;U8RowLOCAL<ROWS_NUMBER;U8RowLOCAL++)
    208e:	19 8a       	std	Y+17, r1	; 0x11
    2090:	d5 c0       	rjmp	.+426    	; 0x223c <KEYPAD_U8GetPressedKey+0x204>
    	 {
    		 u8 u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    2092:	89 89       	ldd	r24, Y+17	; 0x11
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	ce 01       	movw	r24, r28
    209a:	42 96       	adiw	r24, 0x12	; 18
    209c:	fc 01       	movw	r30, r24
    209e:	e2 0f       	add	r30, r18
    20a0:	f3 1f       	adc	r31, r19
    20a2:	90 81       	ld	r25, Z
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	69 2f       	mov	r22, r25
    20a8:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_GetPinValue>
    20ac:	8f 87       	std	Y+15, r24	; 0x0f
    		 if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
    20ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b0:	88 23       	and	r24, r24
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <KEYPAD_U8GetPressedKey+0x7e>
    20b4:	c0 c0       	rjmp	.+384    	; 0x2236 <KEYPAD_U8GetPressedKey+0x1fe>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a8 e4       	ldi	r26, 0x48	; 72
    20bc:	b2 e4       	ldi	r27, 0x42	; 66
    20be:	8b 87       	std	Y+11, r24	; 0x0b
    20c0:	9c 87       	std	Y+12, r25	; 0x0c
    20c2:	ad 87       	std	Y+13, r26	; 0x0d
    20c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a ef       	ldi	r20, 0xFA	; 250
    20d4:	54 e4       	ldi	r21, 0x44	; 68
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8f 83       	std	Y+7, r24	; 0x07
    20e0:	98 87       	std	Y+8, r25	; 0x08
    20e2:	a9 87       	std	Y+9, r26	; 0x09
    20e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	2c f4       	brge	.+10     	; 0x2108 <KEYPAD_U8GetPressedKey+0xd0>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <KEYPAD_U8GetPressedKey+0x14e>
	else if (__tmp > 65535)
    2108:	6f 81       	ldd	r22, Y+7	; 0x07
    210a:	78 85       	ldd	r23, Y+8	; 0x08
    210c:	89 85       	ldd	r24, Y+9	; 0x09
    210e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	4c f5       	brge	.+82     	; 0x2172 <KEYPAD_U8GetPressedKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	6b 85       	ldd	r22, Y+11	; 0x0b
    2122:	7c 85       	ldd	r23, Y+12	; 0x0c
    2124:	8d 85       	ldd	r24, Y+13	; 0x0d
    2126:	9e 85       	ldd	r25, Y+14	; 0x0e
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <KEYPAD_U8GetPressedKey+0x130>
    214a:	88 ec       	ldi	r24, 0xC8	; 200
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <KEYPAD_U8GetPressedKey+0x11e>
    215a:	9c 83       	std	Y+4, r25	; 0x04
    215c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f7       	brne	.-38     	; 0x214a <KEYPAD_U8GetPressedKey+0x112>
    2170:	23 c0       	rjmp	.+70     	; 0x21b8 <KEYPAD_U8GetPressedKey+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2172:	6f 81       	ldd	r22, Y+7	; 0x07
    2174:	78 85       	ldd	r23, Y+8	; 0x08
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <KEYPAD_U8GetPressedKey+0x15a>
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	0e c0       	rjmp	.+28     	; 0x21b8 <KEYPAD_U8GetPressedKey+0x180>
    		 {
    			 //delay to avoid bouncing
					_delay_ms(50);
					//reread switch pin
						while(u8PinValueLocal==KEYPAD_PRESSED_KEY){
							   u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
    219c:	89 89       	ldd	r24, Y+17	; 0x11
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	ce 01       	movw	r24, r28
    21a4:	42 96       	adiw	r24, 0x12	; 18
    21a6:	fc 01       	movw	r30, r24
    21a8:	e2 0f       	add	r30, r18
    21aa:	f3 1f       	adc	r31, r19
    21ac:	90 81       	ld	r25, Z
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	69 2f       	mov	r22, r25
    21b2:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_GetPinValue>
    21b6:	8f 87       	std	Y+15, r24	; 0x0f
    		 if(u8PinValueLocal==KEYPAD_PRESSED_KEY)
    		 {
    			 //delay to avoid bouncing
					_delay_ms(50);
					//reread switch pin
						while(u8PinValueLocal==KEYPAD_PRESSED_KEY){
    21b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ba:	88 23       	and	r24, r24
    21bc:	79 f3       	breq	.-34     	; 0x219c <KEYPAD_U8GetPressedKey+0x164>
							   u8PinValueLocal = DIO_GetPinValue(KEYPAD_PORT ,KPD_RowPinArr[U8RowLOCAL]);
						}
						u8 KPD_u8Value[ROWS_NUMBER][COLUMN_NUMBER]= KEYPAD_VALUES;
    21be:	ce 01       	movw	r24, r28
    21c0:	4a 96       	adiw	r24, 0x1a	; 26
    21c2:	9b a7       	std	Y+43, r25	; 0x2b
    21c4:	8a a7       	std	Y+42, r24	; 0x2a
    21c6:	e4 e7       	ldi	r30, 0x74	; 116
    21c8:	f2 e0       	ldi	r31, 0x02	; 2
    21ca:	fd a7       	std	Y+45, r31	; 0x2d
    21cc:	ec a7       	std	Y+44, r30	; 0x2c
    21ce:	f0 e1       	ldi	r31, 0x10	; 16
    21d0:	fe a7       	std	Y+46, r31	; 0x2e
    21d2:	ec a5       	ldd	r30, Y+44	; 0x2c
    21d4:	fd a5       	ldd	r31, Y+45	; 0x2d
    21d6:	00 80       	ld	r0, Z
    21d8:	8c a5       	ldd	r24, Y+44	; 0x2c
    21da:	9d a5       	ldd	r25, Y+45	; 0x2d
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	9d a7       	std	Y+45, r25	; 0x2d
    21e0:	8c a7       	std	Y+44, r24	; 0x2c
    21e2:	ea a5       	ldd	r30, Y+42	; 0x2a
    21e4:	fb a5       	ldd	r31, Y+43	; 0x2b
    21e6:	00 82       	st	Z, r0
    21e8:	8a a5       	ldd	r24, Y+42	; 0x2a
    21ea:	9b a5       	ldd	r25, Y+43	; 0x2b
    21ec:	01 96       	adiw	r24, 0x01	; 1
    21ee:	9b a7       	std	Y+43, r25	; 0x2b
    21f0:	8a a7       	std	Y+42, r24	; 0x2a
    21f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    21f4:	91 50       	subi	r25, 0x01	; 1
    21f6:	9e a7       	std	Y+46, r25	; 0x2e
    21f8:	ee a5       	ldd	r30, Y+46	; 0x2e
    21fa:	ee 23       	and	r30, r30
    21fc:	51 f7       	brne	.-44     	; 0x21d2 <KEYPAD_U8GetPressedKey+0x19a>
						return KPD_u8Value[U8RowLOCAL][U8ColumnLocal];
    21fe:	89 89       	ldd	r24, Y+17	; 0x11
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	88 89       	ldd	r24, Y+16	; 0x10
    2206:	48 2f       	mov	r20, r24
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	22 0f       	add	r18, r18
    220c:	33 1f       	adc	r19, r19
    220e:	22 0f       	add	r18, r18
    2210:	33 1f       	adc	r19, r19
    2212:	ce 01       	movw	r24, r28
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	82 0f       	add	r24, r18
    2218:	93 1f       	adc	r25, r19
    221a:	84 0f       	add	r24, r20
    221c:	95 1f       	adc	r25, r21
    221e:	fc 01       	movw	r30, r24
    2220:	79 96       	adiw	r30, 0x19	; 25
    2222:	80 81       	ld	r24, Z


        }

 }
}
    2224:	ae 96       	adiw	r28, 0x2e	; 46
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret
     {
 		//active one columne at time ---> low
 		DIO_SetPinValue( KEYPAD_PORT , KPD_ColumnPinArr[U8ColumnLocal] , DIO_LOW);

 		//scan R0 to R3
    	 for(U8RowLOCAL=0;U8RowLOCAL<ROWS_NUMBER;U8RowLOCAL++)
    2236:	89 89       	ldd	r24, Y+17	; 0x11
    2238:	8f 5f       	subi	r24, 0xFF	; 255
    223a:	89 8b       	std	Y+17, r24	; 0x11
    223c:	89 89       	ldd	r24, Y+17	; 0x11
    223e:	84 30       	cpi	r24, 0x04	; 4
    2240:	08 f4       	brcc	.+2      	; 0x2244 <KEYPAD_U8GetPressedKey+0x20c>
    2242:	27 cf       	rjmp	.-434    	; 0x2092 <KEYPAD_U8GetPressedKey+0x5a>
					}


    		 }
			   //deactivate column
			   DIO_SetPinValue(KEYPAD_PORT,KPD_ColumnPinArr[U8ColumnLocal],DIO_HIGH);
    2244:	88 89       	ldd	r24, Y+16	; 0x10
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	ce 01       	movw	r24, r28
    224c:	46 96       	adiw	r24, 0x16	; 22
    224e:	fc 01       	movw	r30, r24
    2250:	e2 0f       	add	r30, r18
    2252:	f3 1f       	adc	r31, r19
    2254:	90 81       	ld	r25, Z
    2256:	83 e0       	ldi	r24, 0x03	; 3
    2258:	69 2f       	mov	r22, r25
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
	u8 KPD_RowPinArr[ROWS_NUMBER]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
	u8 KPD_ColumnPinArr[COLUMN_NUMBER]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};

while(1)
{
     for(U8ColumnLocal=0;U8ColumnLocal<COLUMN_NUMBER;U8ColumnLocal++)
    2260:	88 89       	ldd	r24, Y+16	; 0x10
    2262:	8f 5f       	subi	r24, 0xFF	; 255
    2264:	88 8b       	std	Y+16, r24	; 0x10
    2266:	88 89       	ldd	r24, Y+16	; 0x10
    2268:	84 30       	cpi	r24, 0x04	; 4
    226a:	08 f4       	brcc	.+2      	; 0x226e <KEYPAD_U8GetPressedKey+0x236>
    226c:	02 cf       	rjmp	.-508    	; 0x2072 <KEYPAD_U8GetPressedKey+0x3a>
    226e:	ff ce       	rjmp	.-514    	; 0x206e <KEYPAD_U8GetPressedKey+0x36>

00002270 <main>:
u8 SETUP_config (void);
void SIGNAL_COND_CIRCUIT (u16*AT,u16*CB);
void print_INT_output(u16 num);

void main (void)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	00 d0       	rcall	.+0      	; 0x2276 <main+0x6>
    2276:	00 d0       	rcall	.+0      	; 0x2278 <main+0x8>
    2278:	00 d0       	rcall	.+0      	; 0x227a <main+0xa>
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
	u16 Actual_Temperature;
	u16 CONVERTED_BITS;


/* the initialization of needed prepherals....*/
	LCD_Voidinit();
    227e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <LCD_Voidinit>
	KEYPAD_VoidInit();
    2282:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <KEYPAD_VoidInit>
	SPI_VoidInit();
    2286:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_VoidInit>
	ADC_voidInit();
    228a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ADC_voidInit>



	u8 Optimum_Temperature= SETUP_config();
    228e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <SETUP_config>
    2292:	8a 83       	std	Y+2, r24	; 0x02

	 DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_LOW);// SELECT SLAVE
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	64 e0       	ldi	r22, 0x04	; 4
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
    u8 GARBAGE_VALUE=SPI_transceive(Optimum_Temperature);
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_transceive>
    22a4:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_HIGH); // DESELECT SLAVE
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	64 e0       	ldi	r22, 0x04	; 4
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>



	while(1)
		{
		     CONVERTED_BITS= ADC_u8GetChannelReading(ADC_CHANNEL0);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	0e 94 2c 0b 	call	0x1658	; 0x1658 <ADC_u8GetChannelReading>
    22b6:	9e 83       	std	Y+6, r25	; 0x06
    22b8:	8d 83       	std	Y+5, r24	; 0x05

		     SIGNAL_COND_CIRCUIT(&Actual_Temperature,&CONVERTED_BITS);
    22ba:	ce 01       	movw	r24, r28
    22bc:	03 96       	adiw	r24, 0x03	; 3
    22be:	9e 01       	movw	r18, r28
    22c0:	2b 5f       	subi	r18, 0xFB	; 251
    22c2:	3f 4f       	sbci	r19, 0xFF	; 255
    22c4:	b9 01       	movw	r22, r18
    22c6:	0e 94 24 13 	call	0x2648	; 0x2648 <SIGNAL_COND_CIRCUIT>

		     DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_LOW); // SELECT SLAVE
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	64 e0       	ldi	r22, 0x04	; 4
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>
		     GARBAGE_VALUE= SPI_transceive((u8)Actual_Temperature);
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_transceive>
    22dc:	89 83       	std	Y+1, r24	; 0x01
		     DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_HIGH); // DESELECT SLAVE
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	64 e0       	ldi	r22, 0x04	; 4
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	0e 94 87 07 	call	0xf0e	; 0xf0e <DIO_SetPinValue>

		     print_INT_output(Actual_Temperature);
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	0e 94 7e 13 	call	0x26fc	; 0x26fc <print_INT_output>
    22f0:	df cf       	rjmp	.-66     	; 0x22b0 <main+0x40>

000022f2 <SETUP_config>:
/**
 * starting setup configuration of lcd to choose best temperature for your system ..
 * @return optimum temperature that sends to sleive to configure the hysteresis levels...
 */
u8 SETUP_config (void)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	ac 97       	sbiw	r28, 0x2c	; 44
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendData("WELCOME...");
    2306:	83 e2       	ldi	r24, 0x23	; 35
    2308:	91 e0       	ldi	r25, 0x01	; 1
    230a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <LCD_voidSendData>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	aa e7       	ldi	r26, 0x7A	; 122
    2314:	b4 e4       	ldi	r27, 0x44	; 68
    2316:	8f a3       	std	Y+39, r24	; 0x27
    2318:	98 a7       	std	Y+40, r25	; 0x28
    231a:	a9 a7       	std	Y+41, r26	; 0x29
    231c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231e:	6f a1       	ldd	r22, Y+39	; 0x27
    2320:	78 a5       	ldd	r23, Y+40	; 0x28
    2322:	89 a5       	ldd	r24, Y+41	; 0x29
    2324:	9a a5       	ldd	r25, Y+42	; 0x2a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a ef       	ldi	r20, 0xFA	; 250
    232c:	54 e4       	ldi	r21, 0x44	; 68
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	8b a3       	std	Y+35, r24	; 0x23
    2338:	9c a3       	std	Y+36, r25	; 0x24
    233a:	ad a3       	std	Y+37, r26	; 0x25
    233c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    233e:	6b a1       	ldd	r22, Y+35	; 0x23
    2340:	7c a1       	ldd	r23, Y+36	; 0x24
    2342:	8d a1       	ldd	r24, Y+37	; 0x25
    2344:	9e a1       	ldd	r25, Y+38	; 0x26
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e8       	ldi	r20, 0x80	; 128
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2352:	88 23       	and	r24, r24
    2354:	2c f4       	brge	.+10     	; 0x2360 <SETUP_config+0x6e>
		__ticks = 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9a a3       	std	Y+34, r25	; 0x22
    235c:	89 a3       	std	Y+33, r24	; 0x21
    235e:	3f c0       	rjmp	.+126    	; 0x23de <SETUP_config+0xec>
	else if (__tmp > 65535)
    2360:	6b a1       	ldd	r22, Y+35	; 0x23
    2362:	7c a1       	ldd	r23, Y+36	; 0x24
    2364:	8d a1       	ldd	r24, Y+37	; 0x25
    2366:	9e a1       	ldd	r25, Y+38	; 0x26
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	3f ef       	ldi	r19, 0xFF	; 255
    236c:	4f e7       	ldi	r20, 0x7F	; 127
    236e:	57 e4       	ldi	r21, 0x47	; 71
    2370:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2374:	18 16       	cp	r1, r24
    2376:	4c f5       	brge	.+82     	; 0x23ca <SETUP_config+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2378:	6f a1       	ldd	r22, Y+39	; 0x27
    237a:	78 a5       	ldd	r23, Y+40	; 0x28
    237c:	89 a5       	ldd	r24, Y+41	; 0x29
    237e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e2       	ldi	r20, 0x20	; 32
    2386:	51 e4       	ldi	r21, 0x41	; 65
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	bc 01       	movw	r22, r24
    2392:	cd 01       	movw	r24, r26
    2394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9a a3       	std	Y+34, r25	; 0x22
    239e:	89 a3       	std	Y+33, r24	; 0x21
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <SETUP_config+0xce>
    23a2:	88 ec       	ldi	r24, 0xC8	; 200
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	98 a3       	std	Y+32, r25	; 0x20
    23a8:	8f 8f       	std	Y+31, r24	; 0x1f
    23aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ac:	98 a1       	ldd	r25, Y+32	; 0x20
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <SETUP_config+0xbc>
    23b2:	98 a3       	std	Y+32, r25	; 0x20
    23b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	89 a1       	ldd	r24, Y+33	; 0x21
    23b8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	9a a3       	std	Y+34, r25	; 0x22
    23be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c0:	89 a1       	ldd	r24, Y+33	; 0x21
    23c2:	9a a1       	ldd	r25, Y+34	; 0x22
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	69 f7       	brne	.-38     	; 0x23a2 <SETUP_config+0xb0>
    23c8:	14 c0       	rjmp	.+40     	; 0x23f2 <SETUP_config+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	6b a1       	ldd	r22, Y+35	; 0x23
    23cc:	7c a1       	ldd	r23, Y+36	; 0x24
    23ce:	8d a1       	ldd	r24, Y+37	; 0x25
    23d0:	9e a1       	ldd	r25, Y+38	; 0x26
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9a a3       	std	Y+34, r25	; 0x22
    23dc:	89 a3       	std	Y+33, r24	; 0x21
    23de:	89 a1       	ldd	r24, Y+33	; 0x21
    23e0:	9a a1       	ldd	r25, Y+34	; 0x22
    23e2:	9e 8f       	std	Y+30, r25	; 0x1e
    23e4:	8d 8f       	std	Y+29, r24	; 0x1d
    23e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <SETUP_config+0xf8>
    23ee:	9e 8f       	std	Y+30, r25	; 0x1e
    23f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_VoidSendCommand(CLEAR);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VoidSendCommand>
	LCD_voidSendData("Setup Config..");
    23f8:	8e e2       	ldi	r24, 0x2E	; 46
    23fa:	91 e0       	ldi	r25, 0x01	; 1
    23fc:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <LCD_voidSendData>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	aa e7       	ldi	r26, 0x7A	; 122
    2406:	b4 e4       	ldi	r27, 0x44	; 68
    2408:	89 8f       	std	Y+25, r24	; 0x19
    240a:	9a 8f       	std	Y+26, r25	; 0x1a
    240c:	ab 8f       	std	Y+27, r26	; 0x1b
    240e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	69 8d       	ldd	r22, Y+25	; 0x19
    2412:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2414:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2416:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a ef       	ldi	r20, 0xFA	; 250
    241e:	54 e4       	ldi	r21, 0x44	; 68
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8d 8b       	std	Y+21, r24	; 0x15
    242a:	9e 8b       	std	Y+22, r25	; 0x16
    242c:	af 8b       	std	Y+23, r26	; 0x17
    242e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2430:	6d 89       	ldd	r22, Y+21	; 0x15
    2432:	7e 89       	ldd	r23, Y+22	; 0x16
    2434:	8f 89       	ldd	r24, Y+23	; 0x17
    2436:	98 8d       	ldd	r25, Y+24	; 0x18
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	2c f4       	brge	.+10     	; 0x2452 <SETUP_config+0x160>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9c 8b       	std	Y+20, r25	; 0x14
    244e:	8b 8b       	std	Y+19, r24	; 0x13
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <SETUP_config+0x1de>
	else if (__tmp > 65535)
    2452:	6d 89       	ldd	r22, Y+21	; 0x15
    2454:	7e 89       	ldd	r23, Y+22	; 0x16
    2456:	8f 89       	ldd	r24, Y+23	; 0x17
    2458:	98 8d       	ldd	r25, Y+24	; 0x18
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	4c f5       	brge	.+82     	; 0x24bc <SETUP_config+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	69 8d       	ldd	r22, Y+25	; 0x19
    246c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    246e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2470:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9c 8b       	std	Y+20, r25	; 0x14
    2490:	8b 8b       	std	Y+19, r24	; 0x13
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <SETUP_config+0x1c0>
    2494:	88 ec       	ldi	r24, 0xC8	; 200
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9a 8b       	std	Y+18, r25	; 0x12
    249a:	89 8b       	std	Y+17, r24	; 0x11
    249c:	89 89       	ldd	r24, Y+17	; 0x11
    249e:	9a 89       	ldd	r25, Y+18	; 0x12
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <SETUP_config+0x1ae>
    24a4:	9a 8b       	std	Y+18, r25	; 0x12
    24a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a8:	8b 89       	ldd	r24, Y+19	; 0x13
    24aa:	9c 89       	ldd	r25, Y+20	; 0x14
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	9c 8b       	std	Y+20, r25	; 0x14
    24b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	8b 89       	ldd	r24, Y+19	; 0x13
    24b4:	9c 89       	ldd	r25, Y+20	; 0x14
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f7       	brne	.-38     	; 0x2494 <SETUP_config+0x1a2>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <SETUP_config+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	6d 89       	ldd	r22, Y+21	; 0x15
    24be:	7e 89       	ldd	r23, Y+22	; 0x16
    24c0:	8f 89       	ldd	r24, Y+23	; 0x17
    24c2:	98 8d       	ldd	r25, Y+24	; 0x18
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9c 8b       	std	Y+20, r25	; 0x14
    24ce:	8b 8b       	std	Y+19, r24	; 0x13
    24d0:	8b 89       	ldd	r24, Y+19	; 0x13
    24d2:	9c 89       	ldd	r25, Y+20	; 0x14
    24d4:	98 8b       	std	Y+16, r25	; 0x10
    24d6:	8f 87       	std	Y+15, r24	; 0x0f
    24d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24da:	98 89       	ldd	r25, Y+16	; 0x10
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <SETUP_config+0x1ea>
    24e0:	98 8b       	std	Y+16, r25	; 0x10
    24e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_VoidSendCommand(CLEAR);
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VoidSendCommand>
	LCD_voidSendData("Enter Optimum...");
    24ea:	8d e3       	ldi	r24, 0x3D	; 61
    24ec:	91 e0       	ldi	r25, 0x01	; 1
    24ee:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <LCD_voidSendData>
	LCD_VoidSendCommand(second_row);
    24f2:	80 ec       	ldi	r24, 0xC0	; 192
    24f4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VoidSendCommand>
	LCD_voidSendData("Temperature:");
    24f8:	8e e4       	ldi	r24, 0x4E	; 78
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <LCD_voidSendData>
	u8 TENS_DIGIT= KEYPAD_U8GetPressedKey();
    2500:	0e 94 1c 10 	call	0x2038	; 0x2038 <KEYPAD_U8GetPressedKey>
    2504:	8c a7       	std	Y+44, r24	; 0x2c
	LCD_VoidSendChar(TENS_DIGIT);
    2506:	8c a5       	ldd	r24, Y+44	; 0x2c
    2508:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_VoidSendChar>
	u8 UNITS_DIGIT= KEYPAD_U8GetPressedKey();
    250c:	0e 94 1c 10 	call	0x2038	; 0x2038 <KEYPAD_U8GetPressedKey>
    2510:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_VoidSendChar(UNITS_DIGIT);
    2512:	8b a5       	ldd	r24, Y+43	; 0x2b
    2514:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_VoidSendChar>
	LCD_VoidSendChar('C');
    2518:	83 e4       	ldi	r24, 0x43	; 67
    251a:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_VoidSendChar>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	aa e7       	ldi	r26, 0x7A	; 122
    2524:	b4 e4       	ldi	r27, 0x44	; 68
    2526:	8b 87       	std	Y+11, r24	; 0x0b
    2528:	9c 87       	std	Y+12, r25	; 0x0c
    252a:	ad 87       	std	Y+13, r26	; 0x0d
    252c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4a ef       	ldi	r20, 0xFA	; 250
    253c:	54 e4       	ldi	r21, 0x44	; 68
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8f 83       	std	Y+7, r24	; 0x07
    2548:	98 87       	std	Y+8, r25	; 0x08
    254a:	a9 87       	std	Y+9, r26	; 0x09
    254c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254e:	6f 81       	ldd	r22, Y+7	; 0x07
    2550:	78 85       	ldd	r23, Y+8	; 0x08
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	5f e3       	ldi	r21, 0x3F	; 63
    255e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2562:	88 23       	and	r24, r24
    2564:	2c f4       	brge	.+10     	; 0x2570 <SETUP_config+0x27e>
		__ticks = 1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	3f c0       	rjmp	.+126    	; 0x25ee <SETUP_config+0x2fc>
	else if (__tmp > 65535)
    2570:	6f 81       	ldd	r22, Y+7	; 0x07
    2572:	78 85       	ldd	r23, Y+8	; 0x08
    2574:	89 85       	ldd	r24, Y+9	; 0x09
    2576:	9a 85       	ldd	r25, Y+10	; 0x0a
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	3f ef       	ldi	r19, 0xFF	; 255
    257c:	4f e7       	ldi	r20, 0x7F	; 127
    257e:	57 e4       	ldi	r21, 0x47	; 71
    2580:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2584:	18 16       	cp	r1, r24
    2586:	4c f5       	brge	.+82     	; 0x25da <SETUP_config+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <SETUP_config+0x2de>
    25b2:	88 ec       	ldi	r24, 0xC8	; 200
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <SETUP_config+0x2cc>
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	69 f7       	brne	.-38     	; 0x25b2 <SETUP_config+0x2c0>
    25d8:	14 c0       	rjmp	.+40     	; 0x2602 <SETUP_config+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <SETUP_config+0x308>
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_VoidSendCommand(CLEAR);
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VoidSendCommand>

	// MODIFY THE TEMPERATURE NUMBER...
	TENS_DIGIT-=48;
    2608:	8c a5       	ldd	r24, Y+44	; 0x2c
    260a:	80 53       	subi	r24, 0x30	; 48
    260c:	8c a7       	std	Y+44, r24	; 0x2c
	TENS_DIGIT*=10;
    260e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9c 01       	movw	r18, r24
    2616:	22 0f       	add	r18, r18
    2618:	33 1f       	adc	r19, r19
    261a:	c9 01       	movw	r24, r18
    261c:	88 0f       	add	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	82 0f       	add	r24, r18
    2626:	93 1f       	adc	r25, r19
    2628:	8c a7       	std	Y+44, r24	; 0x2c

	UNITS_DIGIT-=48;
    262a:	8b a5       	ldd	r24, Y+43	; 0x2b
    262c:	80 53       	subi	r24, 0x30	; 48
    262e:	8b a7       	std	Y+43, r24	; 0x2b

	return TENS_DIGIT+UNITS_DIGIT; // temperature number ....
    2630:	9c a5       	ldd	r25, Y+44	; 0x2c
    2632:	8b a5       	ldd	r24, Y+43	; 0x2b
    2634:	89 0f       	add	r24, r25


}
    2636:	ac 96       	adiw	r28, 0x2c	; 44
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <SIGNAL_COND_CIRCUIT>:
 * signal conditioning circuit for temperature sensor...
 * @param AT address of actual temperature that modified..
 * @param CB address of converted bits that used in equation ..
 */
void SIGNAL_COND_CIRCUIT (u16*AT,u16*CB)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <SIGNAL_COND_CIRCUIT+0x6>
    264e:	00 d0       	rcall	.+0      	; 0x2650 <SIGNAL_COND_CIRCUIT+0x8>
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	7c 83       	std	Y+4, r23	; 0x04
    265a:	6b 83       	std	Y+3, r22	; 0x03


    (*AT) = (*CB) * SENSOR_GAIN ;
    265c:	eb 81       	ldd	r30, Y+3	; 0x03
    265e:	fc 81       	ldd	r31, Y+4	; 0x04
    2660:	20 81       	ld	r18, Z
    2662:	31 81       	ldd	r19, Z+1	; 0x01
    2664:	86 e9       	ldi	r24, 0x96	; 150
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	ac 01       	movw	r20, r24
    266a:	24 9f       	mul	r18, r20
    266c:	c0 01       	movw	r24, r0
    266e:	25 9f       	mul	r18, r21
    2670:	90 0d       	add	r25, r0
    2672:	34 9f       	mul	r19, r20
    2674:	90 0d       	add	r25, r0
    2676:	11 24       	eor	r1, r1
    2678:	cc 01       	movw	r24, r24
    267a:	a0 e0       	ldi	r26, 0x00	; 0
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	bc 01       	movw	r22, r24
    2680:	cd 01       	movw	r24, r26
    2682:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	2a e9       	ldi	r18, 0x9A	; 154
    2690:	39 e9       	ldi	r19, 0x99	; 153
    2692:	49 e9       	ldi	r20, 0x99	; 153
    2694:	53 e4       	ldi	r21, 0x43	; 67
    2696:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	e9 81       	ldd	r30, Y+1	; 0x01
    26ac:	fa 81       	ldd	r31, Y+2	; 0x02
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
    /* there is no need for approximation  because of the suitable gain but for confirmation of accuracy ...*/
    if(((*AT)*10)%10 != 0)
    26b2:	e9 81       	ldd	r30, Y+1	; 0x01
    26b4:	fa 81       	ldd	r31, Y+2	; 0x02
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	9c 01       	movw	r18, r24
    26bc:	22 0f       	add	r18, r18
    26be:	33 1f       	adc	r19, r19
    26c0:	c9 01       	movw	r24, r18
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	82 0f       	add	r24, r18
    26cc:	93 1f       	adc	r25, r19
    26ce:	2a e0       	ldi	r18, 0x0A	; 10
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	b9 01       	movw	r22, r18
    26d4:	0e 94 3b 14 	call	0x2876	; 0x2876 <__udivmodhi4>
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	49 f0       	breq	.+18     	; 0x26ee <SIGNAL_COND_CIRCUIT+0xa6>
    {

   	   (*AT)++;
    26dc:	e9 81       	ldd	r30, Y+1	; 0x01
    26de:	fa 81       	ldd	r31, Y+2	; 0x02
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	e9 81       	ldd	r30, Y+1	; 0x01
    26e8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ea:	91 83       	std	Z+1, r25	; 0x01
    26ec:	80 83       	st	Z, r24
    }


}
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <print_INT_output>:

/**
 * Print the Temperature digital value on LCD
 * @param num Number that wants to show on LCD
 */
void print_INT_output(u16 num){
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	62 97       	sbiw	r28, 0x12	; 18
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	9a 8b       	std	Y+18, r25	; 0x12
    2712:	89 8b       	std	Y+17, r24	; 0x11
  u16 remaining;
  remaining = num/10;
    2714:	89 89       	ldd	r24, Y+17	; 0x11
    2716:	9a 89       	ldd	r25, Y+18	; 0x12
    2718:	2a e0       	ldi	r18, 0x0A	; 10
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	b9 01       	movw	r22, r18
    271e:	0e 94 3b 14 	call	0x2876	; 0x2876 <__udivmodhi4>
    2722:	cb 01       	movw	r24, r22
    2724:	98 8b       	std	Y+16, r25	; 0x10
    2726:	8f 87       	std	Y+15, r24	; 0x0f

  LCD_voidSendData("Temperature is :");
    2728:	8b e5       	ldi	r24, 0x5B	; 91
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <LCD_voidSendData>
  LCD_VoidSendCommand(second_row);
    2730:	80 ec       	ldi	r24, 0xC0	; 192
    2732:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VoidSendCommand>
  LCD_VoidSendChar((remaining/10) + 48);
    2736:	8f 85       	ldd	r24, Y+15	; 0x0f
    2738:	98 89       	ldd	r25, Y+16	; 0x10
    273a:	2a e0       	ldi	r18, 0x0A	; 10
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	b9 01       	movw	r22, r18
    2740:	0e 94 3b 14 	call	0x2876	; 0x2876 <__udivmodhi4>
    2744:	cb 01       	movw	r24, r22
    2746:	80 5d       	subi	r24, 0xD0	; 208
    2748:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_VoidSendChar>
  LCD_VoidSendChar((remaining%10) + 48);
    274c:	8f 85       	ldd	r24, Y+15	; 0x0f
    274e:	98 89       	ldd	r25, Y+16	; 0x10
    2750:	2a e0       	ldi	r18, 0x0A	; 10
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	b9 01       	movw	r22, r18
    2756:	0e 94 3b 14 	call	0x2876	; 0x2876 <__udivmodhi4>
    275a:	80 5d       	subi	r24, 0xD0	; 208
    275c:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_VoidSendChar>
  LCD_VoidSendChar((num%10) + 48);
    2760:	89 89       	ldd	r24, Y+17	; 0x11
    2762:	9a 89       	ldd	r25, Y+18	; 0x12
    2764:	2a e0       	ldi	r18, 0x0A	; 10
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	b9 01       	movw	r22, r18
    276a:	0e 94 3b 14 	call	0x2876	; 0x2876 <__udivmodhi4>
    276e:	80 5d       	subi	r24, 0xD0	; 208
    2770:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_VoidSendChar>
  LCD_VoidSendChar('C');
    2774:	83 e4       	ldi	r24, 0x43	; 67
    2776:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_VoidSendChar>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	aa e7       	ldi	r26, 0x7A	; 122
    2780:	b4 e4       	ldi	r27, 0x44	; 68
    2782:	8b 87       	std	Y+11, r24	; 0x0b
    2784:	9c 87       	std	Y+12, r25	; 0x0c
    2786:	ad 87       	std	Y+13, r26	; 0x0d
    2788:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278a:	6b 85       	ldd	r22, Y+11	; 0x0b
    278c:	7c 85       	ldd	r23, Y+12	; 0x0c
    278e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2790:	9e 85       	ldd	r25, Y+14	; 0x0e
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	4a ef       	ldi	r20, 0xFA	; 250
    2798:	54 e4       	ldi	r21, 0x44	; 68
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	8f 83       	std	Y+7, r24	; 0x07
    27a4:	98 87       	std	Y+8, r25	; 0x08
    27a6:	a9 87       	std	Y+9, r26	; 0x09
    27a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	2c f4       	brge	.+10     	; 0x27cc <print_INT_output+0xd0>
		__ticks = 1;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9e 83       	std	Y+6, r25	; 0x06
    27c8:	8d 83       	std	Y+5, r24	; 0x05
    27ca:	3f c0       	rjmp	.+126    	; 0x284a <print_INT_output+0x14e>
	else if (__tmp > 65535)
    27cc:	6f 81       	ldd	r22, Y+7	; 0x07
    27ce:	78 85       	ldd	r23, Y+8	; 0x08
    27d0:	89 85       	ldd	r24, Y+9	; 0x09
    27d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	3f ef       	ldi	r19, 0xFF	; 255
    27d8:	4f e7       	ldi	r20, 0x7F	; 127
    27da:	57 e4       	ldi	r21, 0x47	; 71
    27dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e0:	18 16       	cp	r1, r24
    27e2:	4c f5       	brge	.+82     	; 0x2836 <print_INT_output+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    280c:	0f c0       	rjmp	.+30     	; 0x282c <print_INT_output+0x130>
    280e:	88 ec       	ldi	r24, 0xC8	; 200
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9c 83       	std	Y+4, r25	; 0x04
    2814:	8b 83       	std	Y+3, r24	; 0x03
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <print_INT_output+0x11e>
    281e:	9c 83       	std	Y+4, r25	; 0x04
    2820:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282c:	8d 81       	ldd	r24, Y+5	; 0x05
    282e:	9e 81       	ldd	r25, Y+6	; 0x06
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	69 f7       	brne	.-38     	; 0x280e <print_INT_output+0x112>
    2834:	14 c0       	rjmp	.+40     	; 0x285e <print_INT_output+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	6f 81       	ldd	r22, Y+7	; 0x07
    2838:	78 85       	ldd	r23, Y+8	; 0x08
    283a:	89 85       	ldd	r24, Y+9	; 0x09
    283c:	9a 85       	ldd	r25, Y+10	; 0x0a
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	9e 81       	ldd	r25, Y+6	; 0x06
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	9a 81       	ldd	r25, Y+2	; 0x02
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <print_INT_output+0x15a>
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1000);
  LCD_VoidSendCommand(CLEAR);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VoidSendCommand>

}
    2864:	62 96       	adiw	r28, 0x12	; 18
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <__udivmodhi4>:
    2876:	aa 1b       	sub	r26, r26
    2878:	bb 1b       	sub	r27, r27
    287a:	51 e1       	ldi	r21, 0x11	; 17
    287c:	07 c0       	rjmp	.+14     	; 0x288c <__udivmodhi4_ep>

0000287e <__udivmodhi4_loop>:
    287e:	aa 1f       	adc	r26, r26
    2880:	bb 1f       	adc	r27, r27
    2882:	a6 17       	cp	r26, r22
    2884:	b7 07       	cpc	r27, r23
    2886:	10 f0       	brcs	.+4      	; 0x288c <__udivmodhi4_ep>
    2888:	a6 1b       	sub	r26, r22
    288a:	b7 0b       	sbc	r27, r23

0000288c <__udivmodhi4_ep>:
    288c:	88 1f       	adc	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	5a 95       	dec	r21
    2892:	a9 f7       	brne	.-22     	; 0x287e <__udivmodhi4_loop>
    2894:	80 95       	com	r24
    2896:	90 95       	com	r25
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	08 95       	ret

0000289e <__prologue_saves__>:
    289e:	2f 92       	push	r2
    28a0:	3f 92       	push	r3
    28a2:	4f 92       	push	r4
    28a4:	5f 92       	push	r5
    28a6:	6f 92       	push	r6
    28a8:	7f 92       	push	r7
    28aa:	8f 92       	push	r8
    28ac:	9f 92       	push	r9
    28ae:	af 92       	push	r10
    28b0:	bf 92       	push	r11
    28b2:	cf 92       	push	r12
    28b4:	df 92       	push	r13
    28b6:	ef 92       	push	r14
    28b8:	ff 92       	push	r15
    28ba:	0f 93       	push	r16
    28bc:	1f 93       	push	r17
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	ca 1b       	sub	r28, r26
    28c8:	db 0b       	sbc	r29, r27
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	09 94       	ijmp

000028d6 <__epilogue_restores__>:
    28d6:	2a 88       	ldd	r2, Y+18	; 0x12
    28d8:	39 88       	ldd	r3, Y+17	; 0x11
    28da:	48 88       	ldd	r4, Y+16	; 0x10
    28dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    28de:	6e 84       	ldd	r6, Y+14	; 0x0e
    28e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    28e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    28e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    28e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    28e8:	b9 84       	ldd	r11, Y+9	; 0x09
    28ea:	c8 84       	ldd	r12, Y+8	; 0x08
    28ec:	df 80       	ldd	r13, Y+7	; 0x07
    28ee:	ee 80       	ldd	r14, Y+6	; 0x06
    28f0:	fd 80       	ldd	r15, Y+5	; 0x05
    28f2:	0c 81       	ldd	r16, Y+4	; 0x04
    28f4:	1b 81       	ldd	r17, Y+3	; 0x03
    28f6:	aa 81       	ldd	r26, Y+2	; 0x02
    28f8:	b9 81       	ldd	r27, Y+1	; 0x01
    28fa:	ce 0f       	add	r28, r30
    28fc:	d1 1d       	adc	r29, r1
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
    2908:	ed 01       	movw	r28, r26
    290a:	08 95       	ret

0000290c <printf>:
    290c:	a0 e0       	ldi	r26, 0x00	; 0
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	ec e8       	ldi	r30, 0x8C	; 140
    2912:	f4 e1       	ldi	r31, 0x14	; 20
    2914:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__prologue_saves__+0x20>
    2918:	fe 01       	movw	r30, r28
    291a:	35 96       	adiw	r30, 0x05	; 5
    291c:	61 91       	ld	r22, Z+
    291e:	71 91       	ld	r23, Z+
    2920:	80 91 86 02 	lds	r24, 0x0286
    2924:	90 91 87 02 	lds	r25, 0x0287
    2928:	af 01       	movw	r20, r30
    292a:	0e 94 9b 14 	call	0x2936	; 0x2936 <vfprintf>
    292e:	20 96       	adiw	r28, 0x00	; 0
    2930:	e2 e0       	ldi	r30, 0x02	; 2
    2932:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__epilogue_restores__+0x20>

00002936 <vfprintf>:
    2936:	ab e0       	ldi	r26, 0x0B	; 11
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e1 ea       	ldi	r30, 0xA1	; 161
    293c:	f4 e1       	ldi	r31, 0x14	; 20
    293e:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__prologue_saves__>
    2942:	3c 01       	movw	r6, r24
    2944:	2b 01       	movw	r4, r22
    2946:	5a 01       	movw	r10, r20
    2948:	fc 01       	movw	r30, r24
    294a:	17 82       	std	Z+7, r1	; 0x07
    294c:	16 82       	std	Z+6, r1	; 0x06
    294e:	83 81       	ldd	r24, Z+3	; 0x03
    2950:	81 fd       	sbrc	r24, 1
    2952:	03 c0       	rjmp	.+6      	; 0x295a <vfprintf+0x24>
    2954:	6f ef       	ldi	r22, 0xFF	; 255
    2956:	7f ef       	ldi	r23, 0xFF	; 255
    2958:	c6 c1       	rjmp	.+908    	; 0x2ce6 <vfprintf+0x3b0>
    295a:	9a e0       	ldi	r25, 0x0A	; 10
    295c:	89 2e       	mov	r8, r25
    295e:	1e 01       	movw	r2, r28
    2960:	08 94       	sec
    2962:	21 1c       	adc	r2, r1
    2964:	31 1c       	adc	r3, r1
    2966:	f3 01       	movw	r30, r6
    2968:	23 81       	ldd	r18, Z+3	; 0x03
    296a:	f2 01       	movw	r30, r4
    296c:	23 fd       	sbrc	r18, 3
    296e:	85 91       	lpm	r24, Z+
    2970:	23 ff       	sbrs	r18, 3
    2972:	81 91       	ld	r24, Z+
    2974:	2f 01       	movw	r4, r30
    2976:	88 23       	and	r24, r24
    2978:	09 f4       	brne	.+2      	; 0x297c <vfprintf+0x46>
    297a:	b2 c1       	rjmp	.+868    	; 0x2ce0 <vfprintf+0x3aa>
    297c:	85 32       	cpi	r24, 0x25	; 37
    297e:	39 f4       	brne	.+14     	; 0x298e <vfprintf+0x58>
    2980:	23 fd       	sbrc	r18, 3
    2982:	85 91       	lpm	r24, Z+
    2984:	23 ff       	sbrs	r18, 3
    2986:	81 91       	ld	r24, Z+
    2988:	2f 01       	movw	r4, r30
    298a:	85 32       	cpi	r24, 0x25	; 37
    298c:	29 f4       	brne	.+10     	; 0x2998 <vfprintf+0x62>
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	b3 01       	movw	r22, r6
    2992:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <fputc>
    2996:	e7 cf       	rjmp	.-50     	; 0x2966 <vfprintf+0x30>
    2998:	98 2f       	mov	r25, r24
    299a:	ff 24       	eor	r15, r15
    299c:	ee 24       	eor	r14, r14
    299e:	99 24       	eor	r9, r9
    29a0:	ff e1       	ldi	r31, 0x1F	; 31
    29a2:	ff 15       	cp	r31, r15
    29a4:	d0 f0       	brcs	.+52     	; 0x29da <vfprintf+0xa4>
    29a6:	9b 32       	cpi	r25, 0x2B	; 43
    29a8:	69 f0       	breq	.+26     	; 0x29c4 <vfprintf+0x8e>
    29aa:	9c 32       	cpi	r25, 0x2C	; 44
    29ac:	28 f4       	brcc	.+10     	; 0x29b8 <vfprintf+0x82>
    29ae:	90 32       	cpi	r25, 0x20	; 32
    29b0:	59 f0       	breq	.+22     	; 0x29c8 <vfprintf+0x92>
    29b2:	93 32       	cpi	r25, 0x23	; 35
    29b4:	91 f4       	brne	.+36     	; 0x29da <vfprintf+0xa4>
    29b6:	0e c0       	rjmp	.+28     	; 0x29d4 <vfprintf+0x9e>
    29b8:	9d 32       	cpi	r25, 0x2D	; 45
    29ba:	49 f0       	breq	.+18     	; 0x29ce <vfprintf+0x98>
    29bc:	90 33       	cpi	r25, 0x30	; 48
    29be:	69 f4       	brne	.+26     	; 0x29da <vfprintf+0xa4>
    29c0:	41 e0       	ldi	r20, 0x01	; 1
    29c2:	24 c0       	rjmp	.+72     	; 0x2a0c <vfprintf+0xd6>
    29c4:	52 e0       	ldi	r21, 0x02	; 2
    29c6:	f5 2a       	or	r15, r21
    29c8:	84 e0       	ldi	r24, 0x04	; 4
    29ca:	f8 2a       	or	r15, r24
    29cc:	28 c0       	rjmp	.+80     	; 0x2a1e <vfprintf+0xe8>
    29ce:	98 e0       	ldi	r25, 0x08	; 8
    29d0:	f9 2a       	or	r15, r25
    29d2:	25 c0       	rjmp	.+74     	; 0x2a1e <vfprintf+0xe8>
    29d4:	e0 e1       	ldi	r30, 0x10	; 16
    29d6:	fe 2a       	or	r15, r30
    29d8:	22 c0       	rjmp	.+68     	; 0x2a1e <vfprintf+0xe8>
    29da:	f7 fc       	sbrc	r15, 7
    29dc:	29 c0       	rjmp	.+82     	; 0x2a30 <vfprintf+0xfa>
    29de:	89 2f       	mov	r24, r25
    29e0:	80 53       	subi	r24, 0x30	; 48
    29e2:	8a 30       	cpi	r24, 0x0A	; 10
    29e4:	70 f4       	brcc	.+28     	; 0x2a02 <vfprintf+0xcc>
    29e6:	f6 fe       	sbrs	r15, 6
    29e8:	05 c0       	rjmp	.+10     	; 0x29f4 <vfprintf+0xbe>
    29ea:	98 9c       	mul	r9, r8
    29ec:	90 2c       	mov	r9, r0
    29ee:	11 24       	eor	r1, r1
    29f0:	98 0e       	add	r9, r24
    29f2:	15 c0       	rjmp	.+42     	; 0x2a1e <vfprintf+0xe8>
    29f4:	e8 9c       	mul	r14, r8
    29f6:	e0 2c       	mov	r14, r0
    29f8:	11 24       	eor	r1, r1
    29fa:	e8 0e       	add	r14, r24
    29fc:	f0 e2       	ldi	r31, 0x20	; 32
    29fe:	ff 2a       	or	r15, r31
    2a00:	0e c0       	rjmp	.+28     	; 0x2a1e <vfprintf+0xe8>
    2a02:	9e 32       	cpi	r25, 0x2E	; 46
    2a04:	29 f4       	brne	.+10     	; 0x2a10 <vfprintf+0xda>
    2a06:	f6 fc       	sbrc	r15, 6
    2a08:	6b c1       	rjmp	.+726    	; 0x2ce0 <vfprintf+0x3aa>
    2a0a:	40 e4       	ldi	r20, 0x40	; 64
    2a0c:	f4 2a       	or	r15, r20
    2a0e:	07 c0       	rjmp	.+14     	; 0x2a1e <vfprintf+0xe8>
    2a10:	9c 36       	cpi	r25, 0x6C	; 108
    2a12:	19 f4       	brne	.+6      	; 0x2a1a <vfprintf+0xe4>
    2a14:	50 e8       	ldi	r21, 0x80	; 128
    2a16:	f5 2a       	or	r15, r21
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <vfprintf+0xe8>
    2a1a:	98 36       	cpi	r25, 0x68	; 104
    2a1c:	49 f4       	brne	.+18     	; 0x2a30 <vfprintf+0xfa>
    2a1e:	f2 01       	movw	r30, r4
    2a20:	23 fd       	sbrc	r18, 3
    2a22:	95 91       	lpm	r25, Z+
    2a24:	23 ff       	sbrs	r18, 3
    2a26:	91 91       	ld	r25, Z+
    2a28:	2f 01       	movw	r4, r30
    2a2a:	99 23       	and	r25, r25
    2a2c:	09 f0       	breq	.+2      	; 0x2a30 <vfprintf+0xfa>
    2a2e:	b8 cf       	rjmp	.-144    	; 0x29a0 <vfprintf+0x6a>
    2a30:	89 2f       	mov	r24, r25
    2a32:	85 54       	subi	r24, 0x45	; 69
    2a34:	83 30       	cpi	r24, 0x03	; 3
    2a36:	18 f0       	brcs	.+6      	; 0x2a3e <vfprintf+0x108>
    2a38:	80 52       	subi	r24, 0x20	; 32
    2a3a:	83 30       	cpi	r24, 0x03	; 3
    2a3c:	38 f4       	brcc	.+14     	; 0x2a4c <vfprintf+0x116>
    2a3e:	44 e0       	ldi	r20, 0x04	; 4
    2a40:	50 e0       	ldi	r21, 0x00	; 0
    2a42:	a4 0e       	add	r10, r20
    2a44:	b5 1e       	adc	r11, r21
    2a46:	5f e3       	ldi	r21, 0x3F	; 63
    2a48:	59 83       	std	Y+1, r21	; 0x01
    2a4a:	0f c0       	rjmp	.+30     	; 0x2a6a <vfprintf+0x134>
    2a4c:	93 36       	cpi	r25, 0x63	; 99
    2a4e:	31 f0       	breq	.+12     	; 0x2a5c <vfprintf+0x126>
    2a50:	93 37       	cpi	r25, 0x73	; 115
    2a52:	79 f0       	breq	.+30     	; 0x2a72 <vfprintf+0x13c>
    2a54:	93 35       	cpi	r25, 0x53	; 83
    2a56:	09 f0       	breq	.+2      	; 0x2a5a <vfprintf+0x124>
    2a58:	56 c0       	rjmp	.+172    	; 0x2b06 <vfprintf+0x1d0>
    2a5a:	20 c0       	rjmp	.+64     	; 0x2a9c <vfprintf+0x166>
    2a5c:	f5 01       	movw	r30, r10
    2a5e:	80 81       	ld	r24, Z
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	42 e0       	ldi	r20, 0x02	; 2
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	a4 0e       	add	r10, r20
    2a68:	b5 1e       	adc	r11, r21
    2a6a:	61 01       	movw	r12, r2
    2a6c:	01 e0       	ldi	r16, 0x01	; 1
    2a6e:	10 e0       	ldi	r17, 0x00	; 0
    2a70:	12 c0       	rjmp	.+36     	; 0x2a96 <vfprintf+0x160>
    2a72:	f5 01       	movw	r30, r10
    2a74:	c0 80       	ld	r12, Z
    2a76:	d1 80       	ldd	r13, Z+1	; 0x01
    2a78:	f6 fc       	sbrc	r15, 6
    2a7a:	03 c0       	rjmp	.+6      	; 0x2a82 <vfprintf+0x14c>
    2a7c:	6f ef       	ldi	r22, 0xFF	; 255
    2a7e:	7f ef       	ldi	r23, 0xFF	; 255
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <vfprintf+0x150>
    2a82:	69 2d       	mov	r22, r9
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	42 e0       	ldi	r20, 0x02	; 2
    2a88:	50 e0       	ldi	r21, 0x00	; 0
    2a8a:	a4 0e       	add	r10, r20
    2a8c:	b5 1e       	adc	r11, r21
    2a8e:	c6 01       	movw	r24, r12
    2a90:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strnlen>
    2a94:	8c 01       	movw	r16, r24
    2a96:	5f e7       	ldi	r21, 0x7F	; 127
    2a98:	f5 22       	and	r15, r21
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <vfprintf+0x18e>
    2a9c:	f5 01       	movw	r30, r10
    2a9e:	c0 80       	ld	r12, Z
    2aa0:	d1 80       	ldd	r13, Z+1	; 0x01
    2aa2:	f6 fc       	sbrc	r15, 6
    2aa4:	03 c0       	rjmp	.+6      	; 0x2aac <vfprintf+0x176>
    2aa6:	6f ef       	ldi	r22, 0xFF	; 255
    2aa8:	7f ef       	ldi	r23, 0xFF	; 255
    2aaa:	02 c0       	rjmp	.+4      	; 0x2ab0 <vfprintf+0x17a>
    2aac:	69 2d       	mov	r22, r9
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	42 e0       	ldi	r20, 0x02	; 2
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	a4 0e       	add	r10, r20
    2ab6:	b5 1e       	adc	r11, r21
    2ab8:	c6 01       	movw	r24, r12
    2aba:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <strnlen_P>
    2abe:	8c 01       	movw	r16, r24
    2ac0:	50 e8       	ldi	r21, 0x80	; 128
    2ac2:	f5 2a       	or	r15, r21
    2ac4:	f3 fe       	sbrs	r15, 3
    2ac6:	07 c0       	rjmp	.+14     	; 0x2ad6 <vfprintf+0x1a0>
    2ac8:	1a c0       	rjmp	.+52     	; 0x2afe <vfprintf+0x1c8>
    2aca:	80 e2       	ldi	r24, 0x20	; 32
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	b3 01       	movw	r22, r6
    2ad0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <fputc>
    2ad4:	ea 94       	dec	r14
    2ad6:	8e 2d       	mov	r24, r14
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	08 17       	cp	r16, r24
    2adc:	19 07       	cpc	r17, r25
    2ade:	a8 f3       	brcs	.-22     	; 0x2aca <vfprintf+0x194>
    2ae0:	0e c0       	rjmp	.+28     	; 0x2afe <vfprintf+0x1c8>
    2ae2:	f6 01       	movw	r30, r12
    2ae4:	f7 fc       	sbrc	r15, 7
    2ae6:	85 91       	lpm	r24, Z+
    2ae8:	f7 fe       	sbrs	r15, 7
    2aea:	81 91       	ld	r24, Z+
    2aec:	6f 01       	movw	r12, r30
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	b3 01       	movw	r22, r6
    2af2:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <fputc>
    2af6:	e1 10       	cpse	r14, r1
    2af8:	ea 94       	dec	r14
    2afa:	01 50       	subi	r16, 0x01	; 1
    2afc:	10 40       	sbci	r17, 0x00	; 0
    2afe:	01 15       	cp	r16, r1
    2b00:	11 05       	cpc	r17, r1
    2b02:	79 f7       	brne	.-34     	; 0x2ae2 <vfprintf+0x1ac>
    2b04:	ea c0       	rjmp	.+468    	; 0x2cda <vfprintf+0x3a4>
    2b06:	94 36       	cpi	r25, 0x64	; 100
    2b08:	11 f0       	breq	.+4      	; 0x2b0e <vfprintf+0x1d8>
    2b0a:	99 36       	cpi	r25, 0x69	; 105
    2b0c:	69 f5       	brne	.+90     	; 0x2b68 <vfprintf+0x232>
    2b0e:	f7 fe       	sbrs	r15, 7
    2b10:	08 c0       	rjmp	.+16     	; 0x2b22 <vfprintf+0x1ec>
    2b12:	f5 01       	movw	r30, r10
    2b14:	20 81       	ld	r18, Z
    2b16:	31 81       	ldd	r19, Z+1	; 0x01
    2b18:	42 81       	ldd	r20, Z+2	; 0x02
    2b1a:	53 81       	ldd	r21, Z+3	; 0x03
    2b1c:	84 e0       	ldi	r24, 0x04	; 4
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0a c0       	rjmp	.+20     	; 0x2b36 <vfprintf+0x200>
    2b22:	f5 01       	movw	r30, r10
    2b24:	80 81       	ld	r24, Z
    2b26:	91 81       	ldd	r25, Z+1	; 0x01
    2b28:	9c 01       	movw	r18, r24
    2b2a:	44 27       	eor	r20, r20
    2b2c:	37 fd       	sbrc	r19, 7
    2b2e:	40 95       	com	r20
    2b30:	54 2f       	mov	r21, r20
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	a8 0e       	add	r10, r24
    2b38:	b9 1e       	adc	r11, r25
    2b3a:	9f e6       	ldi	r25, 0x6F	; 111
    2b3c:	f9 22       	and	r15, r25
    2b3e:	57 ff       	sbrs	r21, 7
    2b40:	09 c0       	rjmp	.+18     	; 0x2b54 <vfprintf+0x21e>
    2b42:	50 95       	com	r21
    2b44:	40 95       	com	r20
    2b46:	30 95       	com	r19
    2b48:	21 95       	neg	r18
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	4f 4f       	sbci	r20, 0xFF	; 255
    2b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b50:	e0 e8       	ldi	r30, 0x80	; 128
    2b52:	fe 2a       	or	r15, r30
    2b54:	ca 01       	movw	r24, r20
    2b56:	b9 01       	movw	r22, r18
    2b58:	a1 01       	movw	r20, r2
    2b5a:	2a e0       	ldi	r18, 0x0A	; 10
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__ultoa_invert>
    2b62:	d8 2e       	mov	r13, r24
    2b64:	d2 18       	sub	r13, r2
    2b66:	40 c0       	rjmp	.+128    	; 0x2be8 <vfprintf+0x2b2>
    2b68:	95 37       	cpi	r25, 0x75	; 117
    2b6a:	29 f4       	brne	.+10     	; 0x2b76 <vfprintf+0x240>
    2b6c:	1f 2d       	mov	r17, r15
    2b6e:	1f 7e       	andi	r17, 0xEF	; 239
    2b70:	2a e0       	ldi	r18, 0x0A	; 10
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	1d c0       	rjmp	.+58     	; 0x2bb0 <vfprintf+0x27a>
    2b76:	1f 2d       	mov	r17, r15
    2b78:	19 7f       	andi	r17, 0xF9	; 249
    2b7a:	9f 36       	cpi	r25, 0x6F	; 111
    2b7c:	61 f0       	breq	.+24     	; 0x2b96 <vfprintf+0x260>
    2b7e:	90 37       	cpi	r25, 0x70	; 112
    2b80:	20 f4       	brcc	.+8      	; 0x2b8a <vfprintf+0x254>
    2b82:	98 35       	cpi	r25, 0x58	; 88
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <vfprintf+0x252>
    2b86:	ac c0       	rjmp	.+344    	; 0x2ce0 <vfprintf+0x3aa>
    2b88:	0f c0       	rjmp	.+30     	; 0x2ba8 <vfprintf+0x272>
    2b8a:	90 37       	cpi	r25, 0x70	; 112
    2b8c:	39 f0       	breq	.+14     	; 0x2b9c <vfprintf+0x266>
    2b8e:	98 37       	cpi	r25, 0x78	; 120
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <vfprintf+0x25e>
    2b92:	a6 c0       	rjmp	.+332    	; 0x2ce0 <vfprintf+0x3aa>
    2b94:	04 c0       	rjmp	.+8      	; 0x2b9e <vfprintf+0x268>
    2b96:	28 e0       	ldi	r18, 0x08	; 8
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	0a c0       	rjmp	.+20     	; 0x2bb0 <vfprintf+0x27a>
    2b9c:	10 61       	ori	r17, 0x10	; 16
    2b9e:	14 fd       	sbrc	r17, 4
    2ba0:	14 60       	ori	r17, 0x04	; 4
    2ba2:	20 e1       	ldi	r18, 0x10	; 16
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <vfprintf+0x27a>
    2ba8:	14 fd       	sbrc	r17, 4
    2baa:	16 60       	ori	r17, 0x06	; 6
    2bac:	20 e1       	ldi	r18, 0x10	; 16
    2bae:	32 e0       	ldi	r19, 0x02	; 2
    2bb0:	17 ff       	sbrs	r17, 7
    2bb2:	08 c0       	rjmp	.+16     	; 0x2bc4 <vfprintf+0x28e>
    2bb4:	f5 01       	movw	r30, r10
    2bb6:	60 81       	ld	r22, Z
    2bb8:	71 81       	ldd	r23, Z+1	; 0x01
    2bba:	82 81       	ldd	r24, Z+2	; 0x02
    2bbc:	93 81       	ldd	r25, Z+3	; 0x03
    2bbe:	44 e0       	ldi	r20, 0x04	; 4
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	08 c0       	rjmp	.+16     	; 0x2bd4 <vfprintf+0x29e>
    2bc4:	f5 01       	movw	r30, r10
    2bc6:	80 81       	ld	r24, Z
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	bc 01       	movw	r22, r24
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	42 e0       	ldi	r20, 0x02	; 2
    2bd2:	50 e0       	ldi	r21, 0x00	; 0
    2bd4:	a4 0e       	add	r10, r20
    2bd6:	b5 1e       	adc	r11, r21
    2bd8:	a1 01       	movw	r20, r2
    2bda:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__ultoa_invert>
    2bde:	d8 2e       	mov	r13, r24
    2be0:	d2 18       	sub	r13, r2
    2be2:	8f e7       	ldi	r24, 0x7F	; 127
    2be4:	f8 2e       	mov	r15, r24
    2be6:	f1 22       	and	r15, r17
    2be8:	f6 fe       	sbrs	r15, 6
    2bea:	0b c0       	rjmp	.+22     	; 0x2c02 <vfprintf+0x2cc>
    2bec:	5e ef       	ldi	r21, 0xFE	; 254
    2bee:	f5 22       	and	r15, r21
    2bf0:	d9 14       	cp	r13, r9
    2bf2:	38 f4       	brcc	.+14     	; 0x2c02 <vfprintf+0x2cc>
    2bf4:	f4 fe       	sbrs	r15, 4
    2bf6:	07 c0       	rjmp	.+14     	; 0x2c06 <vfprintf+0x2d0>
    2bf8:	f2 fc       	sbrc	r15, 2
    2bfa:	05 c0       	rjmp	.+10     	; 0x2c06 <vfprintf+0x2d0>
    2bfc:	8f ee       	ldi	r24, 0xEF	; 239
    2bfe:	f8 22       	and	r15, r24
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <vfprintf+0x2d0>
    2c02:	1d 2d       	mov	r17, r13
    2c04:	01 c0       	rjmp	.+2      	; 0x2c08 <vfprintf+0x2d2>
    2c06:	19 2d       	mov	r17, r9
    2c08:	f4 fe       	sbrs	r15, 4
    2c0a:	0d c0       	rjmp	.+26     	; 0x2c26 <vfprintf+0x2f0>
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	ed 0d       	add	r30, r13
    2c10:	f1 1d       	adc	r31, r1
    2c12:	80 81       	ld	r24, Z
    2c14:	80 33       	cpi	r24, 0x30	; 48
    2c16:	19 f4       	brne	.+6      	; 0x2c1e <vfprintf+0x2e8>
    2c18:	99 ee       	ldi	r25, 0xE9	; 233
    2c1a:	f9 22       	and	r15, r25
    2c1c:	08 c0       	rjmp	.+16     	; 0x2c2e <vfprintf+0x2f8>
    2c1e:	1f 5f       	subi	r17, 0xFF	; 255
    2c20:	f2 fe       	sbrs	r15, 2
    2c22:	05 c0       	rjmp	.+10     	; 0x2c2e <vfprintf+0x2f8>
    2c24:	03 c0       	rjmp	.+6      	; 0x2c2c <vfprintf+0x2f6>
    2c26:	8f 2d       	mov	r24, r15
    2c28:	86 78       	andi	r24, 0x86	; 134
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <vfprintf+0x2f8>
    2c2c:	1f 5f       	subi	r17, 0xFF	; 255
    2c2e:	0f 2d       	mov	r16, r15
    2c30:	f3 fc       	sbrc	r15, 3
    2c32:	14 c0       	rjmp	.+40     	; 0x2c5c <vfprintf+0x326>
    2c34:	f0 fe       	sbrs	r15, 0
    2c36:	0f c0       	rjmp	.+30     	; 0x2c56 <vfprintf+0x320>
    2c38:	1e 15       	cp	r17, r14
    2c3a:	10 f0       	brcs	.+4      	; 0x2c40 <vfprintf+0x30a>
    2c3c:	9d 2c       	mov	r9, r13
    2c3e:	0b c0       	rjmp	.+22     	; 0x2c56 <vfprintf+0x320>
    2c40:	9d 2c       	mov	r9, r13
    2c42:	9e 0c       	add	r9, r14
    2c44:	91 1a       	sub	r9, r17
    2c46:	1e 2d       	mov	r17, r14
    2c48:	06 c0       	rjmp	.+12     	; 0x2c56 <vfprintf+0x320>
    2c4a:	80 e2       	ldi	r24, 0x20	; 32
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	b3 01       	movw	r22, r6
    2c50:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <fputc>
    2c54:	1f 5f       	subi	r17, 0xFF	; 255
    2c56:	1e 15       	cp	r17, r14
    2c58:	c0 f3       	brcs	.-16     	; 0x2c4a <vfprintf+0x314>
    2c5a:	04 c0       	rjmp	.+8      	; 0x2c64 <vfprintf+0x32e>
    2c5c:	1e 15       	cp	r17, r14
    2c5e:	10 f4       	brcc	.+4      	; 0x2c64 <vfprintf+0x32e>
    2c60:	e1 1a       	sub	r14, r17
    2c62:	01 c0       	rjmp	.+2      	; 0x2c66 <vfprintf+0x330>
    2c64:	ee 24       	eor	r14, r14
    2c66:	04 ff       	sbrs	r16, 4
    2c68:	0f c0       	rjmp	.+30     	; 0x2c88 <vfprintf+0x352>
    2c6a:	80 e3       	ldi	r24, 0x30	; 48
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	b3 01       	movw	r22, r6
    2c70:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <fputc>
    2c74:	02 ff       	sbrs	r16, 2
    2c76:	1d c0       	rjmp	.+58     	; 0x2cb2 <vfprintf+0x37c>
    2c78:	01 fd       	sbrc	r16, 1
    2c7a:	03 c0       	rjmp	.+6      	; 0x2c82 <vfprintf+0x34c>
    2c7c:	88 e7       	ldi	r24, 0x78	; 120
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e c0       	rjmp	.+28     	; 0x2c9e <vfprintf+0x368>
    2c82:	88 e5       	ldi	r24, 0x58	; 88
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	0b c0       	rjmp	.+22     	; 0x2c9e <vfprintf+0x368>
    2c88:	80 2f       	mov	r24, r16
    2c8a:	86 78       	andi	r24, 0x86	; 134
    2c8c:	91 f0       	breq	.+36     	; 0x2cb2 <vfprintf+0x37c>
    2c8e:	01 ff       	sbrs	r16, 1
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <vfprintf+0x360>
    2c92:	8b e2       	ldi	r24, 0x2B	; 43
    2c94:	01 c0       	rjmp	.+2      	; 0x2c98 <vfprintf+0x362>
    2c96:	80 e2       	ldi	r24, 0x20	; 32
    2c98:	f7 fc       	sbrc	r15, 7
    2c9a:	8d e2       	ldi	r24, 0x2D	; 45
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	b3 01       	movw	r22, r6
    2ca0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <fputc>
    2ca4:	06 c0       	rjmp	.+12     	; 0x2cb2 <vfprintf+0x37c>
    2ca6:	80 e3       	ldi	r24, 0x30	; 48
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	b3 01       	movw	r22, r6
    2cac:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <fputc>
    2cb0:	9a 94       	dec	r9
    2cb2:	d9 14       	cp	r13, r9
    2cb4:	c0 f3       	brcs	.-16     	; 0x2ca6 <vfprintf+0x370>
    2cb6:	da 94       	dec	r13
    2cb8:	f1 01       	movw	r30, r2
    2cba:	ed 0d       	add	r30, r13
    2cbc:	f1 1d       	adc	r31, r1
    2cbe:	80 81       	ld	r24, Z
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	b3 01       	movw	r22, r6
    2cc4:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <fputc>
    2cc8:	dd 20       	and	r13, r13
    2cca:	a9 f7       	brne	.-22     	; 0x2cb6 <vfprintf+0x380>
    2ccc:	06 c0       	rjmp	.+12     	; 0x2cda <vfprintf+0x3a4>
    2cce:	80 e2       	ldi	r24, 0x20	; 32
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	b3 01       	movw	r22, r6
    2cd4:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <fputc>
    2cd8:	ea 94       	dec	r14
    2cda:	ee 20       	and	r14, r14
    2cdc:	c1 f7       	brne	.-16     	; 0x2cce <vfprintf+0x398>
    2cde:	43 ce       	rjmp	.-890    	; 0x2966 <vfprintf+0x30>
    2ce0:	f3 01       	movw	r30, r6
    2ce2:	66 81       	ldd	r22, Z+6	; 0x06
    2ce4:	77 81       	ldd	r23, Z+7	; 0x07
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	2b 96       	adiw	r28, 0x0b	; 11
    2cea:	e2 e1       	ldi	r30, 0x12	; 18
    2cec:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__epilogue_restores__>

00002cf0 <strnlen_P>:
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	05 90       	lpm	r0, Z+
    2cf4:	61 50       	subi	r22, 0x01	; 1
    2cf6:	70 40       	sbci	r23, 0x00	; 0
    2cf8:	01 10       	cpse	r0, r1
    2cfa:	d8 f7       	brcc	.-10     	; 0x2cf2 <strnlen_P+0x2>
    2cfc:	80 95       	com	r24
    2cfe:	90 95       	com	r25
    2d00:	8e 0f       	add	r24, r30
    2d02:	9f 1f       	adc	r25, r31
    2d04:	08 95       	ret

00002d06 <strnlen>:
    2d06:	fc 01       	movw	r30, r24
    2d08:	61 50       	subi	r22, 0x01	; 1
    2d0a:	70 40       	sbci	r23, 0x00	; 0
    2d0c:	01 90       	ld	r0, Z+
    2d0e:	01 10       	cpse	r0, r1
    2d10:	d8 f7       	brcc	.-10     	; 0x2d08 <strnlen+0x2>
    2d12:	80 95       	com	r24
    2d14:	90 95       	com	r25
    2d16:	8e 0f       	add	r24, r30
    2d18:	9f 1f       	adc	r25, r31
    2d1a:	08 95       	ret

00002d1c <fputc>:
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	8c 01       	movw	r16, r24
    2d26:	eb 01       	movw	r28, r22
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	81 ff       	sbrs	r24, 1
    2d2c:	1b c0       	rjmp	.+54     	; 0x2d64 <fputc+0x48>
    2d2e:	82 ff       	sbrs	r24, 2
    2d30:	0d c0       	rjmp	.+26     	; 0x2d4c <fputc+0x30>
    2d32:	2e 81       	ldd	r18, Y+6	; 0x06
    2d34:	3f 81       	ldd	r19, Y+7	; 0x07
    2d36:	8c 81       	ldd	r24, Y+4	; 0x04
    2d38:	9d 81       	ldd	r25, Y+5	; 0x05
    2d3a:	28 17       	cp	r18, r24
    2d3c:	39 07       	cpc	r19, r25
    2d3e:	64 f4       	brge	.+24     	; 0x2d58 <fputc+0x3c>
    2d40:	e8 81       	ld	r30, Y
    2d42:	f9 81       	ldd	r31, Y+1	; 0x01
    2d44:	01 93       	st	Z+, r16
    2d46:	f9 83       	std	Y+1, r31	; 0x01
    2d48:	e8 83       	st	Y, r30
    2d4a:	06 c0       	rjmp	.+12     	; 0x2d58 <fputc+0x3c>
    2d4c:	e8 85       	ldd	r30, Y+8	; 0x08
    2d4e:	f9 85       	ldd	r31, Y+9	; 0x09
    2d50:	80 2f       	mov	r24, r16
    2d52:	09 95       	icall
    2d54:	89 2b       	or	r24, r25
    2d56:	31 f4       	brne	.+12     	; 0x2d64 <fputc+0x48>
    2d58:	8e 81       	ldd	r24, Y+6	; 0x06
    2d5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	9f 83       	std	Y+7, r25	; 0x07
    2d60:	8e 83       	std	Y+6, r24	; 0x06
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <fputc+0x4c>
    2d64:	0f ef       	ldi	r16, 0xFF	; 255
    2d66:	1f ef       	ldi	r17, 0xFF	; 255
    2d68:	c8 01       	movw	r24, r16
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	08 95       	ret

00002d74 <__ultoa_invert>:
    2d74:	fa 01       	movw	r30, r20
    2d76:	aa 27       	eor	r26, r26
    2d78:	28 30       	cpi	r18, 0x08	; 8
    2d7a:	51 f1       	breq	.+84     	; 0x2dd0 <__ultoa_invert+0x5c>
    2d7c:	20 31       	cpi	r18, 0x10	; 16
    2d7e:	81 f1       	breq	.+96     	; 0x2de0 <__ultoa_invert+0x6c>
    2d80:	e8 94       	clt
    2d82:	6f 93       	push	r22
    2d84:	6e 7f       	andi	r22, 0xFE	; 254
    2d86:	6e 5f       	subi	r22, 0xFE	; 254
    2d88:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8e:	af 4f       	sbci	r26, 0xFF	; 255
    2d90:	b1 e0       	ldi	r27, 0x01	; 1
    2d92:	3e d0       	rcall	.+124    	; 0x2e10 <__ultoa_invert+0x9c>
    2d94:	b4 e0       	ldi	r27, 0x04	; 4
    2d96:	3c d0       	rcall	.+120    	; 0x2e10 <__ultoa_invert+0x9c>
    2d98:	67 0f       	add	r22, r23
    2d9a:	78 1f       	adc	r23, r24
    2d9c:	89 1f       	adc	r24, r25
    2d9e:	9a 1f       	adc	r25, r26
    2da0:	a1 1d       	adc	r26, r1
    2da2:	68 0f       	add	r22, r24
    2da4:	79 1f       	adc	r23, r25
    2da6:	8a 1f       	adc	r24, r26
    2da8:	91 1d       	adc	r25, r1
    2daa:	a1 1d       	adc	r26, r1
    2dac:	6a 0f       	add	r22, r26
    2dae:	71 1d       	adc	r23, r1
    2db0:	81 1d       	adc	r24, r1
    2db2:	91 1d       	adc	r25, r1
    2db4:	a1 1d       	adc	r26, r1
    2db6:	20 d0       	rcall	.+64     	; 0x2df8 <__ultoa_invert+0x84>
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <__ultoa_invert+0x48>
    2dba:	68 94       	set
    2dbc:	3f 91       	pop	r19
    2dbe:	2a e0       	ldi	r18, 0x0A	; 10
    2dc0:	26 9f       	mul	r18, r22
    2dc2:	11 24       	eor	r1, r1
    2dc4:	30 19       	sub	r19, r0
    2dc6:	30 5d       	subi	r19, 0xD0	; 208
    2dc8:	31 93       	st	Z+, r19
    2dca:	de f6       	brtc	.-74     	; 0x2d82 <__ultoa_invert+0xe>
    2dcc:	cf 01       	movw	r24, r30
    2dce:	08 95       	ret
    2dd0:	46 2f       	mov	r20, r22
    2dd2:	47 70       	andi	r20, 0x07	; 7
    2dd4:	40 5d       	subi	r20, 0xD0	; 208
    2dd6:	41 93       	st	Z+, r20
    2dd8:	b3 e0       	ldi	r27, 0x03	; 3
    2dda:	0f d0       	rcall	.+30     	; 0x2dfa <__ultoa_invert+0x86>
    2ddc:	c9 f7       	brne	.-14     	; 0x2dd0 <__ultoa_invert+0x5c>
    2dde:	f6 cf       	rjmp	.-20     	; 0x2dcc <__ultoa_invert+0x58>
    2de0:	46 2f       	mov	r20, r22
    2de2:	4f 70       	andi	r20, 0x0F	; 15
    2de4:	40 5d       	subi	r20, 0xD0	; 208
    2de6:	4a 33       	cpi	r20, 0x3A	; 58
    2de8:	18 f0       	brcs	.+6      	; 0x2df0 <__ultoa_invert+0x7c>
    2dea:	49 5d       	subi	r20, 0xD9	; 217
    2dec:	31 fd       	sbrc	r19, 1
    2dee:	40 52       	subi	r20, 0x20	; 32
    2df0:	41 93       	st	Z+, r20
    2df2:	02 d0       	rcall	.+4      	; 0x2df8 <__ultoa_invert+0x84>
    2df4:	a9 f7       	brne	.-22     	; 0x2de0 <__ultoa_invert+0x6c>
    2df6:	ea cf       	rjmp	.-44     	; 0x2dcc <__ultoa_invert+0x58>
    2df8:	b4 e0       	ldi	r27, 0x04	; 4
    2dfa:	a6 95       	lsr	r26
    2dfc:	97 95       	ror	r25
    2dfe:	87 95       	ror	r24
    2e00:	77 95       	ror	r23
    2e02:	67 95       	ror	r22
    2e04:	ba 95       	dec	r27
    2e06:	c9 f7       	brne	.-14     	; 0x2dfa <__ultoa_invert+0x86>
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	61 05       	cpc	r22, r1
    2e0c:	71 05       	cpc	r23, r1
    2e0e:	08 95       	ret
    2e10:	9b 01       	movw	r18, r22
    2e12:	ac 01       	movw	r20, r24
    2e14:	0a 2e       	mov	r0, r26
    2e16:	06 94       	lsr	r0
    2e18:	57 95       	ror	r21
    2e1a:	47 95       	ror	r20
    2e1c:	37 95       	ror	r19
    2e1e:	27 95       	ror	r18
    2e20:	ba 95       	dec	r27
    2e22:	c9 f7       	brne	.-14     	; 0x2e16 <__ultoa_invert+0xa2>
    2e24:	62 0f       	add	r22, r18
    2e26:	73 1f       	adc	r23, r19
    2e28:	84 1f       	adc	r24, r20
    2e2a:	95 1f       	adc	r25, r21
    2e2c:	a0 1d       	adc	r26, r0
    2e2e:	08 95       	ret

00002e30 <_exit>:
    2e30:	f8 94       	cli

00002e32 <__stop_program>:
    2e32:	ff cf       	rjmp	.-2      	; 0x2e32 <__stop_program>
